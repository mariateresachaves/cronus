/* Generated By:JJTree: Do not edit this line. ASTGetNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package main;

import java.io.PrintWriter;

public class ASTGetNode extends SimpleNode {
	
	public Boolean semantic_error = false;

	public ASTGetNode(int id) {

		super(id);

	}

	public ASTGetNode(CronusGrammarParser p, int id) {

		super(p, id);

	}

	@Override
	public void interpret() {
		
		// NODE? VARIABLE EQ VARIABLE OSQBR INTEGER CSQBR SCOL
		if (jjtGetNumChildren() == 8) {

			if(symtab.get(jjtGetChild(3).getVal()) instanceof NodeList) {
				
				System.err.println(ErrorConstant.NOT_INIT);
				semantic_error = true;
				return;
				
			}
			
			if (symtab.containsKey(jjtGetChild(1).getVal())) {

				System.err.println(ErrorConstant.DUPLICATE_ENTRY + jjtGetChild(1).getVal() + " of type Node.");
				semantic_error = true;
				return;

			} else {
				
				String nodes = jjtGetChild(3).getVal();
				String index = jjtGetChild(5).getVal().toString();
				symtab.put(jjtGetChild(1).getVal(), nodes + "[" + index + "]");

			}
			// Right side
			if (symtab.containsKey(jjtGetChild(3).getVal())) {

				if (!(symtab.contains(symtab.get(jjtGetChild(3).getVal())))) {

					System.out.println(ErrorConstant.INCOMPATIBLE_TYPES + jjtGetChild(3).getVal() + " is not of type Node[].");
					semantic_error = true;
					return;

				}

			} else {

				System.out.println(ErrorConstant.SYMBOL_NOT_FOUND + jjtGetChild(3).getVal() + ".");
				semantic_error = true;
				return;

			}

			// INTEGER must be >= 0
			if (Integer.parseInt(jjtGetChild(5).getVal()) < 0) {

				System.out.println(ErrorConstant.NODE_LIST_INDEX);
				semantic_error = true;

			}

		}

		// VARIABLE EQ VARIABLE OSQBR INTEGER CSQBR SCOL
		else {

			if(symtab.get(jjtGetChild(2).getVal()) instanceof NodeList) {
				
				System.err.println(ErrorConstant.NOT_INIT);
				semantic_error = true;
				return;
				
			}
			
			// Left side
			if (symtab.containsKey(jjtGetChild(0).getVal())) {

				if (!(symtab.contains(symtab.get(jjtGetChild(0).getVal().toString().split("\\.")[0])))) {

					System.out.println(ErrorConstant.INCOMPATIBLE_TYPES + jjtGetChild(0).getVal() + " is not of type Node.");
					semantic_error = true;
					return;

				} else {
					
					if(symtab.get(jjtGetChild(2).getVal()) == null) {
						
						System.out.println(ErrorConstant.SYMBOL_NOT_FOUND + jjtGetChild(2).getVal() + ".");
						semantic_error = true;
						return;
						
					} else {
					
						String nodes = jjtGetChild(2).getVal();
						String index = jjtGetChild(4).getVal();
						symtab.put(jjtGetChild(0).getVal(), nodes + "[" + index + "]");
						
					}

				}

			} else {

				System.out.println(ErrorConstant.SYMBOL_NOT_FOUND + jjtGetChild(0).getVal() + ".");
				semantic_error = true;
				return;

			}

			// Right side
			if (symtab.containsKey(jjtGetChild(2).getVal())) {

				if (!(symtab.contains(symtab.get(jjtGetChild(2).getVal())))) {

					System.out.println(ErrorConstant.INCOMPATIBLE_TYPES + jjtGetChild(2).getVal() + " is not of type Node[].");
					semantic_error = true;
					return;

				}

			} else {

				System.out.println(ErrorConstant.SYMBOL_NOT_FOUND + jjtGetChild(2).getVal() + ".");
				semantic_error = true;
				return;

			}

			// INTEGER must be >= 0
			if (Integer.parseInt(jjtGetChild(4).getVal()) < 0) {

				System.out.println(ErrorConstant.NODE_LIST_INDEX);
				semantic_error = true;

			}

		}

	}

	@Override
	public void toGremlin(PrintWriter writer) {
		
		if(!semantic_error) {

			// NODE? VARIABLE EQ VARIABLE OSQBR INTEGER CSQBR SCOL
			String nodes;
			String node;
			Integer index = ((8 - jjtGetNumChildren()) == 0) ? 3 : 0;
			
			nodes = symtab.get(jjtGetChild(index).getVal()).toString();
			node = jjtGetChild(index).getVal();
			
			writer.println(node + " = " + nodes);
			
		}

	}
}
/*
 * JavaCC - OriginalChecksum=cded3144411652adc8992d54d573c4b0 (do not edit this
 * line)
 */

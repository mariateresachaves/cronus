/* Generated By:JJTree: Do not edit this line. ASTGetNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package main;

public class ASTGetNode extends SimpleNode {

	public ASTGetNode(int id) {

		super(id);

	}

	public ASTGetNode(CronusGrammarParser p, int id) {

		super(p, id);

	}

	@Override
	public void interpret() {

		// TODO: NODE? VARIABLE EQ VARIABLE OSQBR INTEGER CSQBR SCOL
		if (jjtGetNumChildren() == 8) {

			if (symtab.containsKey(jjtGetChild(1).getVal())) {

				System.err.println(ErrorConstant.DUPLICATE_ENTRY + jjtGetChild(1).getVal() + " of type Node.");
				return;

			} else
				symtab.put(jjtGetChild(1).getVal(), new NodeT());

		} else {
			
			if (symtab.containsKey(jjtGetChild(0).getVal())) {

				if (!(symtab.get(jjtGetChild(0).getVal()) instanceof Node)) {

					System.out.println(ErrorConstant.INCOMPATIBLE_TYPES + jjtGetChild(0).getVal() + " is not of type Node.");
					return;

				} else {
					
					
					
				}

			} else {

				System.out.println(ErrorConstant.SYMBOL_NOT_FOUND + jjtGetChild(1).getVal() + ".");
				return;

			}
			// TODO: TESTAR SE VARIAVEL NAO DECLARADA DA ERRO
		}
		
		// TODO: FAZER VERIFICAÇÕES DO NA VARIAVEL DO LADO DIREITO
		
	}

}
/*
 * JavaCC - OriginalChecksum=cded3144411652adc8992d54d573c4b0 (do not edit this
 * line)
 */

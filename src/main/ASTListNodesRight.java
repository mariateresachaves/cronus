/* Generated By:JJTree: Do not edit this line. ASTListNodesRight.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package main;

import java.io.PrintWriter;

public class ASTListNodesRight extends SimpleNode {
	
	public Boolean semantic_error = false;

	public ASTListNodesRight(int id) {

		super(id);

	}

	public ASTListNodesRight(CronusGrammarParser p, int id) {

		super(p, id);

	}

	@Override
	public String interpret(String graph) {

		if (symtab.containsKey(jjtGetChild(0).getVal())) {
			
			if (!(symtab.get(jjtGetChild(0).getVal()) instanceof Graph)) {

				System.out.println(ErrorConstant.INCOMPATIBLE_TYPES + jjtGetChild(0).getVal() + " is not of type Graph.");
				semantic_error = true;
				return null;

			} else {
				
				jjtGetChild(4).interpret();
				return jjtGetChild(0).getVal().toString();
			}

		} else {

			System.out.println(ErrorConstant.SYMBOL_NOT_FOUND + jjtGetChild(0).getVal() + ".");
			semantic_error = true;
			return null;

		}	

	}
	
	@Override
	public void toGremlin(PrintWriter writer) {
		
		// ListNodeRight -> VARIABLE DOT NODE OPAR AllParameters CPAR
		
		String graph = jjtGetChild(0).getVal().toString();
		writer.print(" = " + graph);
		
		jjtGetChild(4).toGremlin(writer);
		
	}

}
/*
 * JavaCC - OriginalChecksum=77d783c9464748b6c39dce8f704d2023 (do not edit this
 * line)
 */

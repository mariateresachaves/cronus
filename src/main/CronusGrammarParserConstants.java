/* Generated By:JJTree&JavaCC: Do not edit this line. CronusGrammarParserConstants.java */
package main;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CronusGrammarParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DIGIT = 5;
  /** RegularExpression Id. */
  int LOWER = 6;
  /** RegularExpression Id. */
  int UPPER = 7;
  /** RegularExpression Id. */
  int NEW = 8;
  /** RegularExpression Id. */
  int BOOL = 9;
  /** RegularExpression Id. */
  int LABEL = 10;
  /** RegularExpression Id. */
  int DEGREE = 11;
  /** RegularExpression Id. */
  int WEIGHT = 12;
  /** RegularExpression Id. */
  int SHORTESTPATH = 13;
  /** RegularExpression Id. */
  int DEPTHSEARCH = 14;
  /** RegularExpression Id. */
  int BREADTHSEARCH = 15;
  /** RegularExpression Id. */
  int IN = 16;
  /** RegularExpression Id. */
  int OUT = 17;
  /** RegularExpression Id. */
  int EDGES = 18;
  /** RegularExpression Id. */
  int EDGEF = 19;
  /** RegularExpression Id. */
  int NODES = 20;
  /** RegularExpression Id. */
  int NODEF = 21;
  /** RegularExpression Id. */
  int PATH = 22;
  /** RegularExpression Id. */
  int GRAPH = 23;
  /** RegularExpression Id. */
  int NODE = 24;
  /** RegularExpression Id. */
  int EDGE = 25;
  /** RegularExpression Id. */
  int VARIABLE = 26;
  /** RegularExpression Id. */
  int STRING = 27;
  /** RegularExpression Id. */
  int INTEGER = 28;
  /** RegularExpression Id. */
  int FLOAT = 29;
  /** RegularExpression Id. */
  int OPAR = 30;
  /** RegularExpression Id. */
  int CPAR = 31;
  /** RegularExpression Id. */
  int OBR = 32;
  /** RegularExpression Id. */
  int CBR = 33;
  /** RegularExpression Id. */
  int OSQBR = 34;
  /** RegularExpression Id. */
  int CSQBR = 35;
  /** RegularExpression Id. */
  int COL = 36;
  /** RegularExpression Id. */
  int SCOL = 37;
  /** RegularExpression Id. */
  int COMMA = 38;
  /** RegularExpression Id. */
  int EQ = 39;
  /** RegularExpression Id. */
  int DOT = 40;
  /** RegularExpression Id. */
  int COMP = 41;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "<DIGIT>",
    "<LOWER>",
    "<UPPER>",
    "\"new\"",
    "<BOOL>",
    "\"label\"",
    "\"degree\"",
    "\"weight\"",
    "\"shortestPath\"",
    "\"depthSearch\"",
    "\"breadthSearch\"",
    "\"in\"",
    "\"out\"",
    "\"edges\"",
    "\"edge\"",
    "\"nodes\"",
    "\"node\"",
    "<PATH>",
    "\"Graph\"",
    "\"Node\"",
    "\"Edge\"",
    "<VARIABLE>",
    "<STRING>",
    "<INTEGER>",
    "<FLOAT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\":\"",
    "\";\"",
    "\",\"",
    "\"=\"",
    "\".\"",
    "<COMP>",
  };

}

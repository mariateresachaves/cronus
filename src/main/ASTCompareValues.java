/* Generated By:JJTree: Do not edit this line. ASTCompareValues.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package main;

import java.io.PrintWriter;

public class ASTCompareValues extends SimpleNode {
	
	public Boolean semantic_error = false;

	public ASTCompareValues(int id) {

		super(id);

	}

	public ASTCompareValues(CronusGrammarParser p, int id) {

		super(p, id);

	}

	@Override
	public void interpret() {

		// TODO: alguma verificação que seja necessária

	}
	
	@Override
	public void toGremlin(PrintWriter writer) {
		
		// ListNode -> NodeListDec ( EQ ListNodeRight)? SCOL
		//			|  VARIABLE EQ ListNodeRight SCOL
		
		// ListNodeRight -> VARIABLE DOT NODE OPAR AllParameters CPAR
		
		// AllParameters -> NodeLabel ( COMMA NodeDegree ( COMMA NodeProperties)?)?
		//				|	NodeLabel ( COMMA NodeProperties ( COMMA NodeDegree)?)?
		//				|	NodeDegree ( COMMA NodeLabel ( COMMA NodeProperties)?)?
		//				|	NodeDegree ( COMMA NodeProperties ( COMMA NodeLabel)?)?
		//				|	NodeProperties ( COMMA NodeLabel ( COMMA NodeDegree)?)?
		//				|	NodeProperties ( COMMA NodeDegree ( COMMA NodeLabel)?)?
		
		// NodeLabel -> LABEL EQ Value
		
		// NodeDegree -> DEGREE CompareValues
		
		// CompareValues -> IntervalBracket Value COMMA Value IntervalBracket
		//				|	COMP Value
		
		int k = jjtGetNumChildren();
		
		if(k == 2) {
			writer.print(jjtGetChild(0).getVal().toString() + " ");
			jjtGetChild(1).toGremlin(writer);
		}
		else {
			
			if(jjtGetChild(0).getVal().toString().equals("[")) {
				
			} else if()
			
			
			jjtGetChild(0).toGremlin(writer);
			jjtGetChild(4).toGremlin(writer);
		}
		
		// Cronus
		// Gremlin
		
		// nos = g.nodes();
		// nos = g.V.toList()
		
		// Node[] nos = g.nodes();
		// nos = g.V.toList()
		
		// Node[] nos = g.nodes(label="knows");
		// nos = g.V.filter{it.outE('knows').hasNext()}.toList()
		
		// Node[] nos = g.nodes(label="knows", degree < 3); 
		// nos = g.V.filter{it.outE('knows').hasNext(); it.outE.toList().size() < 3}.toList()
		
		// Node[] nos = g.nodes(label="knows", degree < 3, {name="josh"});
		// nos = g.V.filter{it.outE('knows').hasNext(); it.outE.toList().size() < 3; it.name == 'josh'}.toList()
		
		// nodes2 = g2.nodes(label="knows", degree < 3, {age = [2, 3], name="josh"});
		// nos = g.V.filter{it.outE('knows').hasNext(); it.outE.toList().size() < 3; it.name == 'josh'; it.age >= 2; it.age <= 3}.toList()
		
		// nodes2 = g2.nodes(label="knows", degree < 3, {name="josh", age = ]2, 3]});
		// nos = g.V.filter{it.outE('knows').hasNext(); it.outE.toList().size() < 3; it.age > 2; it.age <= 3; it.name == 'josh'}.toList()
		
		// nodes2 = g2.nodes(label="knows", degree < 3, {name="josh", age >= 2});
		// nos = g.V.filter{it.outE('knows').hasNext(); it.outE.toList().size() < 3; it.name == 'josh'; it.age >= 2}.toList()
		
		// nodes2 = g2.nodes(label="knows", degree < 3, {name="josh", age == 2});
		// nos = g.V.filter{it.outE('knows').hasNext(); it.outE.toList().size() < 3; it.name == 'josh'; it.age == 2}.toList()
		
	}

}
/*
 * JavaCC - OriginalChecksum=17f3e1f1310d8b3c78d9c2655ab419dc (do not edit this
 * line)
 */

/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  	TRACK_TOKENS = true;
  	MULTI = true;
	STATIC = true;
	NODE_EXTENDS = "MyNode";
	LOOKAHEAD = 1;
}

PARSER_BEGIN(CronusGrammarParser)
package main;

public class CronusGrammarParser
{
	/**
	* Returns the root node of the AST.
	* It only makes sense to call this after a successful parse.
	* @return the root node
	*/
	public Node rootNode() {
    	return jjtree.rootNode();
 	}
 	
}

PARSER_END(CronusGrammarParser)

SKIP :
{
  	" "
|  "\n"
| 	"\r"
| 	"\r\n"
}

TOKEN : /* --- LITERALS --- */
{
	< #DIGIT   : ["0"-"9"] >
| 	< #LOWER   : ["a"-"z"] >
| 	< #UPPER   : ["A"-"Z"] >
}

TOKEN : /* --- RESERVED WORDS --- */
{
  	< NEW           : "new">
| 	< BOOL          : "true" | "false" >
|   < LABEL         : "label" >
|   < DEGREE        : "degree" >
|   < WEIGHT        : "weight" >
|   < SHORTESTPATH  : "shortestPath" >
|   < DEPTHSEARCH   : "depthSearch" >
|   < BREADTHSEARCH : "breadthSearch" >
|   < IN            : "in" >
|   < OUT           : "out" >
|   < EDGES         : "edges" >
|   < EDGEF         : "edge" >
|   < NODES         : "nodes" >
|   < NODEF         : "node" >
}

TOKEN : /* --- FUNCTIONS --- */
{
  	< PATH : (
  			 	("\'")( (< LOWER > | < UPPER >) ":")? ("\\"(< LOWER > | < UPPER > | < DIGIT > | "_" | "." | "-")+ )+("\\")?("\'")
  			 |
  			 	("\'")(~["\'"])*("\'")
  			 )>
}

TOKEN : /* --- CLASSES --- */
{
  	< GRAPH    : "Graph" >
| 	< NODE     : "Node" >
| 	< EDGE     : "Edge" >
| 	< VARIABLE : ("_" | < LOWER > | < UPPER > )+ ("_" | < LOWER > | < UPPER > | < DIGIT > )* >
|   < STRING   : "\"" (~["\"", "\\"] | "\\\"" | "\\\\")* "\"" >
| 	< INTEGER  : ("+" | "-")? (< DIGIT >)+ >
| 	< FLOAT    : ("+" | "-")? ((< DIGIT >)*".")?(< DIGIT >)+ >
}

TOKEN : /*--- OPERATORS --- */
{
   	< OPAR    : "(" > 
| 	< CPAR    : ")" >
| 	< OBR     : "{" >
| 	< CBR     : "}" >
| 	< OSQBR   : "[" >
| 	< CSQBR   : "]" >
| 	< COL     : ":" >
| 	< SCOL    : ";" >
| 	< COMMA   : "," >
| 	< EQ      : "=" >
| 	< DOT     : "." >
| 	< COMP    : ">" | "<" | "<=" | ">=" | "==" >
}

/*
	== START FUNCTION ==
*/
SimpleNode Start() :
{
  	Token v, eq, d, opar, comma, cpar, scol, n, osqbr, csqbr, i;
}
{
 	(
 	    LOOKAHEAD(3)
    	Declaration()
	|
		LOOKAHEAD(3)
    	NewGraph()
	|
		LOOKAHEAD(ListNodes())
   		ListNodes()
   	|
   		LOOKAHEAD(SearchGraph())
   		SearchGraph()
   	|
   		GetNode()
  	)+
  	< EOF >
  	{return jjtThis;}
}

/*
	== DECLARATION OF VARIABLES ==
*/
void Declaration() #Declaration :
{
  	Token g, e, n, v, scol;
}
{
  	(
  	  	g = < GRAPH > {jjtThis.val = g.image;} 			#Graph
	|
	  	e = < EDGE > {jjtThis.val = e.image;} 			#Edge
	|
		LOOKAHEAD(2)	  	n = < NODE > {jjtThis.val = n.image;} 			#Node	)
	v    = < VARIABLE > {jjtThis.val = v.image;} 		#Variable
  	scol = < SCOL > {jjtThis.val = scol.image;} 		#Semicolon
}

/*
	== NEW GRAPH ==
*/
void NewGraph() #NewGraph :
{
  	Token g, e, n, osqbr, csqbr, v, eq, scol;
}
{
  	(
		(
	  	  	g = < GRAPH > {jjtThis.val = g.image;} 			#Graph
		)?
		v = < VARIABLE > {jjtThis.val = v.image;} 			#Variable
  	)
	eq   = < EQ > {jjtThis.val = eq.image;} 				#Equal
	NewGraphRight()
  	scol = < SCOL > {jjtThis.val = scol.image;} 			#Semicolon
}

/*
	== RIGHT HAND SIDE OF A NEW GRAPH ==
*/
void NewGraphRight() #NewGraphRight :
{
  	Token n, g, p, opar, cpar;
}
{
  	n    = < NEW > {jjtThis.val = n.image;} 	#New
  	g    = < GRAPH > {jjtThis.val = g.image;}	#Graph
  	opar = < OPAR > {jjtThis.val = opar.image;} #OpenParenthesis 
  	p    = < PATH > {jjtThis.val = p.image;} 	#Path
  	cpar = < CPAR > {jjtThis.val = cpar.image;} #CloseParenthesis
}

/*
	== LIST ALL NODES ACCORDING TWO PARAMETERS (IF ANY) ==
*/
void ListNodes() #ListNodes :
{
  	Token eq, scol, v, d, n, o, c;
}
{
  	NodeListDec()
  	(
    	eq = < EQ > {jjtThis.val = eq.image;} 		#Equal
    	ListNodesRight()
  	)?
  	scol = < SCOL > {jjtThis.val = scol.image;}		#Semicolon
|
	v    = < VARIABLE > {jjtThis.val = v.image;}	#Variable
  	eq   = < EQ > {jjtThis.val = eq.image;} 		#Equal
  	ListNodesRight()
  	scol = < SCOL > {jjtThis.val = scol.image;} 	#Semicolon
}

/*
	== NODE LIST DECLARATION ==
*/
void NodeListDec() #NodeListDec :
{
  	Token n, obr, cbr, v;
}
{
  	n   = < NODE > {jjtThis.val = n.image;} 		#Node
  	obr = < OSQBR > {jjtThis.val = obr.image;} 		#OpenSquareBracket
  	cbr = < CSQBR > {jjtThis.val = cbr.image;} 		#CloseSquareBracket
  	v   = < VARIABLE > {jjtThis.val = v.image;} 	#Variable
}

/*
	== LIST NODES RIGHT ==
*/

void ListNodesRight() #ListNodesRight :
{
  	Token v, d, n, o, c;}{
  	v  = < VARIABLE > {jjtThis.val = v.image;} 	#Variable
	d  = < DOT > {jjtThis.val = d.image;}		#Dot
	n  = < NODES > {jjtThis.val = n.image;}		#Nodes
	o  = < OPAR > {jjtThis.val = o.image;}		#OpenParenthesis
	AllParametersNode()
	c  = < CPAR > {jjtThis.val = c.image;}		#CloseParenthesis}

/*
	== FILTER SEARCH NODE WITH ALL THREE PARAMETERS ==
*/
void AllParametersNode() #AllParametersNode :
{
  	Token comma;
}
{
	(
	  	LOOKAHEAD(2)		NodeLabel()
	  	(
	    	comma = < COMMA > {jjtThis.val = comma.image;} 		#Comma
	    	NodeDegree()
		    (
		      comma = < COMMA > {jjtThis.val = comma.image;} 	#Comma
		      NodeProperties()
		    )?
	    )?
	|
		NodeLabel()
	  	(
		    
		    comma = < COMMA > {jjtThis.val = comma.image;} 		#Comma
	    	NodeProperties()
		    (
		      comma = < COMMA > {jjtThis.val = comma.image;}	#Comma
		      NodeDegree()
		    )?
	    )?
	|
		LOOKAHEAD(2)
		NodeDegree()
	  	(
	    	comma = < COMMA > {jjtThis.val = comma.image;}		#Comma
	    	NodeLabel()
		    (
		      comma = < COMMA > {jjtThis.val = comma.image;}	#Comma
		      NodeProperties()
		    )?
	    )?
	|
		NodeDegree()
	  	(
	    	comma = < COMMA > {jjtThis.val = comma.image;}		#Comma
	    	NodeProperties()
		    (
		      comma = < COMMA > {jjtThis.val = comma.image;}	#Comma
		      NodeLabel()
		    )?
	    )?
	|
		LOOKAHEAD(2)
		NodeProperties()
	  	(
	    	comma = < COMMA > {jjtThis.val = comma.image;}		#Comma
	    	NodeLabel()
		    (
		      comma = < COMMA > {jjtThis.val = comma.image;}	#Comma
		      NodeDegree()
		    )?
	    )?
	|
		NodeProperties()
	  	(
			comma = < COMMA > {jjtThis.val = comma.image;}		#Comma
	    	NodeDegree()
		    (
		      comma = < COMMA > {jjtThis.val = comma.image;}	#Comma
		      NodeLabel()
		    )?
	    )?
	)?
}

/*
	== FILTER NODE PARAMETER LABEL ==
*/
void NodeLabel() #NodeLabel :
{
  	Token label, eq;
}
{
  	label = < LABEL > {jjtThis.val = label.image;}	#Label
 	eq    = < EQ > {jjtThis.val = eq.image;}		#Equal
 	Value()
}

/*
	== FILTER NODE PARAMETER DEGREE ==
*/
void NodeDegree() #NodeDegree :
{
  	Token degree;
}
{
  	degree = < DEGREE > {jjtThis.val = degree.image;}	#Degree
  	CompareValues()
}

/*
 	== FILTER NODE PARAMETER PROPERTIES ==
*/
void NodeProperties() #NodeProperties :
{
  	Token comma, osqbr, csqbr, key, eq;
}
{
  	(
  	  	LOOKAHEAD(4)
		osqbr = < OBR > {jjtThis.val = osqbr.image;}		#OpenBracket
  		key   = < VARIABLE > {jjtThis.val = key.image;}		#Variable
  		eq    = < EQ > {jjtThis.val = eq.image;}			#Equal
  		Value()
	|
  		osqbr = < OBR > {jjtThis.val = osqbr.image;}		#OpenBracket
	  	key   = < VARIABLE > {jjtThis.val = key.image;}		#Variable
	  	eq    = < EQ > {jjtThis.val = eq.image;}			#Equal
	  	CompareValues()
  	)
  	(
  	  	LOOKAHEAD(4) 
    	comma = < COMMA > {jjtThis.val = comma.image;}		#Comma
    	key   = < VARIABLE > {jjtThis.val = key.image;}		#Variable
    	eq    = < EQ > {jjtThis.val = eq.image;}			#Equal
    	Value()
   |
   		comma = < COMMA > {jjtThis.val = comma.image;}		#Comma
    	key   = < VARIABLE > {jjtThis.val = key.image;}		#Variable
    	eq    = < EQ > {jjtThis.val = eq.image;}			#Equal
    	CompareValues()
  	)*
  	csqbr = < CBR > {jjtThis.val = csqbr.image;}			#CloseBracket
}

/*
	== TYPES OF VALUES: STRING OR NUMBER ==
*/
void Value() #Value :
{
  	Token s, i, f;
}
{
  	s = < STRING > {jjtThis.val = s.image;}		#String
|
	i = < INTEGER > {jjtThis.val = i.image;}	#Integer
|
	f = < FLOAT > {jjtThis.val = f.image;}		#Float
}

/*
	== DEFINE WAYS TO COMPARE VARIABLE WITH VALUES ==
*/
void CompareValues() #CompareValues :
{
  	Token eq, os, s, i, f, cs, comma, comp;
}
{
  	// Equals to an Interval
  	IntervalBracket()
  	Value()
  	comma = < COMMA > {jjtThis.val = comma.image;}	#Comma
  	Value()
  	IntervalBracket()
|
	// Compares to a Value
	comp = < COMP > {jjtThis.val = comp.image;}		#Compares
	Value()
}

/*
	== INTERVAL BRACKET ==
*/
void IntervalBracket() #IntervalBracket :
{
  	Token os, cs;
}
{
  	os = < OSQBR > {jjtThis.val = os.image;}	#OpenSquareBracket
|
	cs = < CSQBR > {jjtThis.val = cs.image;}	#CloseSquareBracket
}

/*
	== SEARCH GRAPH ==
*/

void SearchGraph() #SearchGraph :
{
  	Token v, eq, d, opar, comma, cpar, scol;}{
	(	  	NodeListDec()
	|
		v     = < VARIABLE > {jjtThis.val = v.image;}		#Variable
	)
  	eq    = < EQ > {jjtThis.val = eq.image;}				#Equal
  	v     = < VARIABLE > {jjtThis.val = v.image;}			#Variable
 	d     = < DOT > {jjtThis.val = d.image;}				#Dot
 	SearchType()
  	opar  = < OPAR > {jjtThis.val = opar.image;}			#OpenParenthesis
  	v     = < VARIABLE > {jjtThis.val = v.image;}			#Variable
  	comma = < COMMA > {jjtThis.val = comma.image;}			#Comma
  	v     = < VARIABLE > {jjtThis.val = v.image;}			#Variable
	MoreOptions()
   	cpar  = < CPAR > {jjtThis.val = cpar.image;}			#CloseParenthesis
 	scol  = < SCOL > {jjtThis.val = scol.image;}			#Semicolon}

/*
	== SEARCH TYPE ==
*/
void SearchType() #SearchType :
{
  	Token sp;
}
{
  	sp = < SHORTESTPATH > {jjtThis.val = sp.image;}		#ShortestPath
|
 	sp = < DEPTHSEARCH > {jjtThis.val = sp.image;}		#DepthSearch
|
	sp = < BREADTHSEARCH > {jjtThis.val = sp.image;}	#BreadthSearch
}

/*
	== MORE OPTIONS ==
*/
void MoreOptions() #MoreOptions :
{
  	Token comma;
}
{
  	(
	  	comma = < COMMA > {jjtThis.val = comma.image;}	#Comma
	  	NodeProperties()
	)?
}

/*
	== GET NODE ==
*/

void GetNode() #GetNode :
{
  	Token n, v, eq, osqbr, i, csqbr, scol;}{
  	(  	  	n     = < NODE > {jjtThis.val = n.image;} 	#Node
  	)?
  	v     = < VARIABLE > {jjtThis.val = v.image;} 	#Variable
  	eq    = < EQ > {jjtThis.val = eq.image;} 		#Equal
  	v     = < VARIABLE > {jjtThis.val = v.image;} 	#Variable
  	osqbr = < OSQBR > {jjtThis.val = osqbr.image;} 	#OpenSquareBracket
  	i     = < INTEGER > {jjtThis.val = i.image;} 	#Integer
  	csqbr = < CSQBR > {jjtThis.val = csqbr.image;} 	#CloseSquareBracket
  	scol  = < SCOL > {jjtThis.val = scol.image;} 	#Semicolon}
/* Generated By:JJTree&JavaCC: Do not edit this line. CronusGrammar.java */
package main;

public class CronusGrammar/*@bgen(jjtree)*/implements CronusGrammarTreeConstants, CronusGrammarConstants {/*@bgen(jjtree)*/
  protected static JJTCronusGrammarState jjtree = new JJTCronusGrammarState();public static void main(String args []) throws ParseException, TokenMgrError
        {
                CronusGrammar parser = new CronusGrammar(System.in);
                SimpleNode root = parser.Start();
                root.dump("");
        }

/*
	== START FUNCTION ==
*/
  static final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
        SimpleNode jjtn000 = new SimpleNode(JJTSTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token scol;
    try {
      label_1:
      while (true) {
        if (jj_2_1(3)) {
          Declaration();
        } else if (jj_2_2(2)) {
          NewGraph();
        } else if (jj_2_3(2)) {
          ListNodes();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VARIABLE:
            SearchGraph();
            break;
          default:
            jj_la1[0] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GRAPH:
        case NODE:
        case EDGE:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/*
	== DECLARATION OF VARIABLES ==
*/
  static final public void Declaration() throws ParseException {
 /*@bgen(jjtree) Declaration */
        SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token g, e, n, osqbr, csqbr, v, scol;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
        g = jj_consume_token(GRAPH);
                                SimpleNode jjtn001 = new SimpleNode(JJTGRAPH);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
        try {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtc001 = false;
                               jjtn001.val = g.image;
        } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
        }
        break;
      case EDGE:
        e = jj_consume_token(EDGE);
                               SimpleNode jjtn002 = new SimpleNode(JJTEDGE);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
        try {
                               jjtree.closeNodeScope(jjtn002, true);
                               jjtc002 = false;
                              jjtn002.val = e.image;
        } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002, true);
                               }
        }
        break;
      default:
        jj_la1[2] = jj_gen;
        if (jj_2_4(2)) {
          n = jj_consume_token(NODE);
                               SimpleNode jjtn003 = new SimpleNode(JJTNODE);
                               boolean jjtc003 = true;
                               jjtree.openNodeScope(jjtn003);
          try {
                               jjtree.closeNodeScope(jjtn003, true);
                               jjtc003 = false;
                              jjtn003.val = n.image;
          } finally {
                               if (jjtc003) {
                                 jjtree.closeNodeScope(jjtn003, true);
                               }
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NODE:
            n = jj_consume_token(NODE);
                                   SimpleNode jjtn004 = new SimpleNode(JJTNODE);
                                   boolean jjtc004 = true;
                                   jjtree.openNodeScope(jjtn004);
            try {
                                   jjtree.closeNodeScope(jjtn004, true);
                                   jjtc004 = false;
                                  jjtn004.val = n.image;
            } finally {
                                   if (jjtc004) {
                                     jjtree.closeNodeScope(jjtn004, true);
                                   }
            }
            osqbr = jj_consume_token(OSQBR);
                                    SimpleNode jjtn005 = new SimpleNode(JJTOPENSQUAREBRACKET);
                                    boolean jjtc005 = true;
                                    jjtree.openNodeScope(jjtn005);
            try {
                                    jjtree.closeNodeScope(jjtn005, true);
                                    jjtc005 = false;
                                   jjtn005.val = osqbr.image;
            } finally {
                                    if (jjtc005) {
                                      jjtree.closeNodeScope(jjtn005, true);
                                    }
            }
            csqbr = jj_consume_token(CSQBR);
                                    SimpleNode jjtn006 = new SimpleNode(JJTCLOSESQUAREBRACKET);
                                    boolean jjtc006 = true;
                                    jjtree.openNodeScope(jjtn006);
            try {
                                    jjtree.closeNodeScope(jjtn006, true);
                                    jjtc006 = false;
                                   jjtn006.val = csqbr.image;
            } finally {
                                    if (jjtc006) {
                                      jjtree.closeNodeScope(jjtn006, true);
                                    }
            }
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      v = jj_consume_token(VARIABLE);
                              SimpleNode jjtn007 = new SimpleNode(JJTVARIABLE);
                              boolean jjtc007 = true;
                              jjtree.openNodeScope(jjtn007);
      try {
                              jjtree.closeNodeScope(jjtn007, true);
                              jjtc007 = false;
                             jjtn007.val = v.image;
      } finally {
                              if (jjtc007) {
                                jjtree.closeNodeScope(jjtn007, true);
                              }
      }
      scol = jj_consume_token(SCOL);
                          SimpleNode jjtn008 = new SimpleNode(JJTSEMICOLON);
                          boolean jjtc008 = true;
                          jjtree.openNodeScope(jjtn008);
      try {
                          jjtree.closeNodeScope(jjtn008, true);
                          jjtc008 = false;
                         jjtn008.val = scol.image;
      } finally {
                          if (jjtc008) {
                            jjtree.closeNodeScope(jjtn008, true);
                          }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
	== NEW GRAPH ==
*/
  static final public void NewGraph() throws ParseException {
 /*@bgen(jjtree) NewGraph */
        SimpleNode jjtn000 = new SimpleNode(JJTNEWGRAPH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token g, e, n, osqbr, csqbr, v, eq, scol;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
      case NODE:
      case EDGE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GRAPH:
          g = jj_consume_token(GRAPH);
                                        SimpleNode jjtn001 = new SimpleNode(JJTGRAPH);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
          try {
                                        jjtree.closeNodeScope(jjtn001, true);
                                        jjtc001 = false;
                                       jjtn001.val = g.image;
          } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001, true);
                                        }
          }
          break;
        case EDGE:
          e = jj_consume_token(EDGE);
                                       SimpleNode jjtn002 = new SimpleNode(JJTEDGE);
                                       boolean jjtc002 = true;
                                       jjtree.openNodeScope(jjtn002);
          try {
                                       jjtree.closeNodeScope(jjtn002, true);
                                       jjtc002 = false;
                                      jjtn002.val = e.image;
          } finally {
                                       if (jjtc002) {
                                         jjtree.closeNodeScope(jjtn002, true);
                                       }
          }
          break;
        default:
          jj_la1[4] = jj_gen;
          if (jj_2_5(2)) {
            n = jj_consume_token(NODE);
                                       SimpleNode jjtn003 = new SimpleNode(JJTNODE);
                                       boolean jjtc003 = true;
                                       jjtree.openNodeScope(jjtn003);
            try {
                                       jjtree.closeNodeScope(jjtn003, true);
                                       jjtc003 = false;
                                      jjtn003.val = n.image;
            } finally {
                                       if (jjtc003) {
                                         jjtree.closeNodeScope(jjtn003, true);
                                       }
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NODE:
              n = jj_consume_token(NODE);
                                               SimpleNode jjtn004 = new SimpleNode(JJTNODE);
                                               boolean jjtc004 = true;
                                               jjtree.openNodeScope(jjtn004);
              try {
                                               jjtree.closeNodeScope(jjtn004, true);
                                               jjtc004 = false;
                                              jjtn004.val = n.image;
              } finally {
                                               if (jjtc004) {
                                                 jjtree.closeNodeScope(jjtn004, true);
                                               }
              }
              osqbr = jj_consume_token(OSQBR);
                                            SimpleNode jjtn005 = new SimpleNode(JJTOPENSQUAREBRACKET);
                                            boolean jjtc005 = true;
                                            jjtree.openNodeScope(jjtn005);
              try {
                                            jjtree.closeNodeScope(jjtn005, true);
                                            jjtc005 = false;
                                           jjtn005.val = osqbr.image;
              } finally {
                                            if (jjtc005) {
                                              jjtree.closeNodeScope(jjtn005, true);
                                            }
              }
              csqbr = jj_consume_token(CSQBR);
                                            SimpleNode jjtn006 = new SimpleNode(JJTCLOSESQUAREBRACKET);
                                            boolean jjtc006 = true;
                                            jjtree.openNodeScope(jjtn006);
              try {
                                            jjtree.closeNodeScope(jjtn006, true);
                                            jjtc006 = false;
                                           jjtn006.val = csqbr.image;
              } finally {
                                            if (jjtc006) {
                                              jjtree.closeNodeScope(jjtn006, true);
                                            }
              }
              break;
            default:
              jj_la1[5] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      v = jj_consume_token(VARIABLE);
                                   SimpleNode jjtn007 = new SimpleNode(JJTVARIABLE);
                                   boolean jjtc007 = true;
                                   jjtree.openNodeScope(jjtn007);
      try {
                                   jjtree.closeNodeScope(jjtn007, true);
                                   jjtc007 = false;
                                  jjtn007.val = v.image;
      } finally {
                                   if (jjtc007) {
                                     jjtree.closeNodeScope(jjtn007, true);
                                   }
      }
      eq = jj_consume_token(EQ);
                        SimpleNode jjtn008 = new SimpleNode(JJTEQUAL);
                        boolean jjtc008 = true;
                        jjtree.openNodeScope(jjtn008);
      try {
                        jjtree.closeNodeScope(jjtn008, true);
                        jjtc008 = false;
                       jjtn008.val = eq.image;
      } finally {
                        if (jjtc008) {
                          jjtree.closeNodeScope(jjtn008, true);
                        }
      }
      NewGraphRight();
      scol = jj_consume_token(SCOL);
                          SimpleNode jjtn009 = new SimpleNode(JJTSEMICOLON);
                          boolean jjtc009 = true;
                          jjtree.openNodeScope(jjtn009);
      try {
                          jjtree.closeNodeScope(jjtn009, true);
                          jjtc009 = false;
                         jjtn009.val = scol.image;
      } finally {
                          if (jjtc009) {
                            jjtree.closeNodeScope(jjtn009, true);
                          }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
	== RIGHT HAND SIDE OF A NEW GRAPH ==
*/
  static final public void NewGraphRight() throws ParseException {
 /*@bgen(jjtree) NewGraphRight */
        SimpleNode jjtn000 = new SimpleNode(JJTNEWGRAPHRIGHT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token n, g, p, opar, cpar;
    try {
      n = jj_consume_token(NEW);
                         SimpleNode jjtn001 = new SimpleNode(JJTNEW);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
      try {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                        jjtn001.val = n.image;
      } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
      }
      g = jj_consume_token(GRAPH);
                           SimpleNode jjtn002 = new SimpleNode(JJTGRAPH);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
      try {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtc002 = false;
                          jjtn002.val = g.image;
      } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
                           }
      }
      opar = jj_consume_token(OPAR);
                          SimpleNode jjtn003 = new SimpleNode(JJTOPENPARENTHESIS);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
      try {
                          jjtree.closeNodeScope(jjtn003, true);
                          jjtc003 = false;
                         jjtn003.val = opar.image;
      } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                          }
      }
      p = jj_consume_token(PATH);
                          SimpleNode jjtn004 = new SimpleNode(JJTPATH);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
      try {
                          jjtree.closeNodeScope(jjtn004, true);
                          jjtc004 = false;
                         jjtn004.val = p.image;
      } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004, true);
                          }
      }
      cpar = jj_consume_token(CPAR);
                          SimpleNode jjtn005 = new SimpleNode(JJTCLOSEPARENTHESIS);
                          boolean jjtc005 = true;
                          jjtree.openNodeScope(jjtn005);
      try {
                          jjtree.closeNodeScope(jjtn005, true);
                          jjtc005 = false;
                         jjtn005.val = cpar.image;
      } finally {
                          if (jjtc005) {
                            jjtree.closeNodeScope(jjtn005, true);
                          }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
	== LIST ALL NODES ACCORDING TWO PARAMETERS (IF ANY) ==
*/
  static final public void ListNodes() throws ParseException {
 /*@bgen(jjtree) ListNodes */
        SimpleNode jjtn000 = new SimpleNode(JJTLISTNODES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token eq, scol, v;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NODE:
        NodeListDec();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          eq = jj_consume_token(EQ);
                      SimpleNode jjtn001 = new SimpleNode(JJTEQUAL);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
          try {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                     jjtn001.val = eq.image;
          } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                      }
          }
          ListNodesRight();
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        scol = jj_consume_token(SCOL);
                          SimpleNode jjtn002 = new SimpleNode(JJTSEMICOLON);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
        try {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                         jjtn002.val = scol.image;
        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
        }
        break;
      case VARIABLE:
        v = jj_consume_token(VARIABLE);
                           SimpleNode jjtn003 = new SimpleNode(JJTVARIABLE);
                           boolean jjtc003 = true;
                           jjtree.openNodeScope(jjtn003);
        try {
                           jjtree.closeNodeScope(jjtn003, true);
                           jjtc003 = false;
                          jjtn003.val = v.image;
        } finally {
                           if (jjtc003) {
                             jjtree.closeNodeScope(jjtn003, true);
                           }
        }
        eq = jj_consume_token(EQ);
                      SimpleNode jjtn004 = new SimpleNode(JJTEQUAL);
                      boolean jjtc004 = true;
                      jjtree.openNodeScope(jjtn004);
        try {
                      jjtree.closeNodeScope(jjtn004, true);
                      jjtc004 = false;
                     jjtn004.val = eq.image;
        } finally {
                      if (jjtc004) {
                        jjtree.closeNodeScope(jjtn004, true);
                      }
        }
        ListNodesRight();
        scol = jj_consume_token(SCOL);
                          SimpleNode jjtn005 = new SimpleNode(JJTSEMICOLON);
                          boolean jjtc005 = true;
                          jjtree.openNodeScope(jjtn005);
        try {
                          jjtree.closeNodeScope(jjtn005, true);
                          jjtc005 = false;
                         jjtn005.val = scol.image;
        } finally {
                          if (jjtc005) {
                            jjtree.closeNodeScope(jjtn005, true);
                          }
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
	== NODE LIST DECLARATION ==
*/
  static final public void NodeListDec() throws ParseException {
 /*@bgen(jjtree) NodeListDec */
        SimpleNode jjtn000 = new SimpleNode(JJTNODELISTDEC);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token n, obr, cbr, v;
    try {
      n = jj_consume_token(NODE);
                       SimpleNode jjtn001 = new SimpleNode(JJTNODE);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
      try {
                       jjtree.closeNodeScope(jjtn001, true);
                       jjtc001 = false;
                      jjtn001.val = n.image;
      } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                       }
      }
      obr = jj_consume_token(OSQBR);
                          SimpleNode jjtn002 = new SimpleNode(JJTOPENSQUAREBRACKET);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
      try {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                         jjtn002.val = obr.image;
      } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
      }
      cbr = jj_consume_token(CSQBR);
                          SimpleNode jjtn003 = new SimpleNode(JJTCLOSESQUAREBRACKET);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
      try {
                          jjtree.closeNodeScope(jjtn003, true);
                          jjtc003 = false;
                         jjtn003.val = cbr.image;
      } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                          }
      }
      v = jj_consume_token(VARIABLE);
                           SimpleNode jjtn004 = new SimpleNode(JJTVARIABLE);
                           boolean jjtc004 = true;
                           jjtree.openNodeScope(jjtn004);
      try {
                           jjtree.closeNodeScope(jjtn004, true);
                           jjtc004 = false;
                          jjtn004.val = v.image;
      } finally {
                           if (jjtc004) {
                             jjtree.closeNodeScope(jjtn004, true);
                           }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
	== RIGHT SIDE OF DECLARATION TO GET LIST OF NODES ==
*/
  static final public void ListNodesRight() throws ParseException {
 /*@bgen(jjtree) ListNodesRight */
        SimpleNode jjtn000 = new SimpleNode(JJTLISTNODESRIGHT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token v, d, n, o, c;
    try {
      v = jj_consume_token(VARIABLE);
                           SimpleNode jjtn001 = new SimpleNode(JJTVARIABLE);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
      try {
                           jjtree.closeNodeScope(jjtn001, true);
                           jjtc001 = false;
                          jjtn001.val = v.image;
      } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                           }
      }
      d = jj_consume_token(DOT);
                      SimpleNode jjtn002 = new SimpleNode(JJTDOT);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
      try {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtc002 = false;
                     jjtn002.val = d.image;
      } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
      }
      n = jj_consume_token(NODES);
                        SimpleNode jjtn003 = new SimpleNode(JJTNODES);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
      try {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                       jjtn003.val = n.image;
      } finally {
                        if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003, true);
                        }
      }
      o = jj_consume_token(OPAR);
                       SimpleNode jjtn004 = new SimpleNode(JJTOPENPARENTHESIS);
                       boolean jjtc004 = true;
                       jjtree.openNodeScope(jjtn004);
      try {
                       jjtree.closeNodeScope(jjtn004, true);
                       jjtc004 = false;
                      jjtn004.val = o.image;
      } finally {
                       if (jjtc004) {
                         jjtree.closeNodeScope(jjtn004, true);
                       }
      }
      AllParametersNode();
      c = jj_consume_token(CPAR);
                       SimpleNode jjtn005 = new SimpleNode(JJTCLOSEPARENTHESIS);
                       boolean jjtc005 = true;
                       jjtree.openNodeScope(jjtn005);
      try {
                       jjtree.closeNodeScope(jjtn005, true);
                       jjtc005 = false;
                      jjtn005.val = c.image;
      } finally {
                       if (jjtc005) {
                         jjtree.closeNodeScope(jjtn005, true);
                       }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
	== FILTER SEARCH NODE WITH ALL THREE PARAMETERS ==
*/
  static final public void AllParametersNode() throws ParseException {
 /*@bgen(jjtree) AllParametersNode */
        SimpleNode jjtn000 = new SimpleNode(JJTALLPARAMETERSNODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token comma;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
      case DEGREE:
      case OSQBR:
        if (jj_2_6(2)) {
          NodeLabel();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            comma = jj_consume_token(COMMA);
                                    SimpleNode jjtn001 = new SimpleNode(JJTCOMMA);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
            try {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtc001 = false;
                                   jjtn001.val = comma.image;
            } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                    }
            }
            NodeDegree();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              comma = jj_consume_token(COMMA);
                                          SimpleNode jjtn002 = new SimpleNode(JJTCOMMA);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
              try {
                                          jjtree.closeNodeScope(jjtn002, true);
                                          jjtc002 = false;
                                         jjtn002.val = comma.image;
              } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002, true);
                                          }
              }
              NodeProperties();
              break;
            default:
              jj_la1[9] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[10] = jj_gen;
            ;
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LABEL:
            NodeLabel();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              comma = jj_consume_token(COMMA);
                                        SimpleNode jjtn003 = new SimpleNode(JJTCOMMA);
                                        boolean jjtc003 = true;
                                        jjtree.openNodeScope(jjtn003);
              try {
                                        jjtree.closeNodeScope(jjtn003, true);
                                        jjtc003 = false;
                                       jjtn003.val = comma.image;
              } finally {
                                        if (jjtc003) {
                                          jjtree.closeNodeScope(jjtn003, true);
                                        }
              }
              NodeProperties();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                comma = jj_consume_token(COMMA);
                                          SimpleNode jjtn004 = new SimpleNode(JJTCOMMA);
                                          boolean jjtc004 = true;
                                          jjtree.openNodeScope(jjtn004);
                try {
                                          jjtree.closeNodeScope(jjtn004, true);
                                          jjtc004 = false;
                                         jjtn004.val = comma.image;
                } finally {
                                          if (jjtc004) {
                                            jjtree.closeNodeScope(jjtn004, true);
                                          }
                }
                NodeDegree();
                break;
              default:
                jj_la1[11] = jj_gen;
                ;
              }
              break;
            default:
              jj_la1[12] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[21] = jj_gen;
            if (jj_2_7(2)) {
              NodeDegree();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                comma = jj_consume_token(COMMA);
                                    SimpleNode jjtn005 = new SimpleNode(JJTCOMMA);
                                    boolean jjtc005 = true;
                                    jjtree.openNodeScope(jjtn005);
                try {
                                    jjtree.closeNodeScope(jjtn005, true);
                                    jjtc005 = false;
                                   jjtn005.val = comma.image;
                } finally {
                                    if (jjtc005) {
                                      jjtree.closeNodeScope(jjtn005, true);
                                    }
                }
                NodeLabel();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case COMMA:
                  comma = jj_consume_token(COMMA);
                                          SimpleNode jjtn006 = new SimpleNode(JJTCOMMA);
                                          boolean jjtc006 = true;
                                          jjtree.openNodeScope(jjtn006);
                  try {
                                          jjtree.closeNodeScope(jjtn006, true);
                                          jjtc006 = false;
                                         jjtn006.val = comma.image;
                  } finally {
                                          if (jjtc006) {
                                            jjtree.closeNodeScope(jjtn006, true);
                                          }
                  }
                  NodeProperties();
                  break;
                default:
                  jj_la1[13] = jj_gen;
                  ;
                }
                break;
              default:
                jj_la1[14] = jj_gen;
                ;
              }
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case DEGREE:
                NodeDegree();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case COMMA:
                  comma = jj_consume_token(COMMA);
                                    SimpleNode jjtn007 = new SimpleNode(JJTCOMMA);
                                    boolean jjtc007 = true;
                                    jjtree.openNodeScope(jjtn007);
                  try {
                                    jjtree.closeNodeScope(jjtn007, true);
                                    jjtc007 = false;
                                   jjtn007.val = comma.image;
                  } finally {
                                    if (jjtc007) {
                                      jjtree.closeNodeScope(jjtn007, true);
                                    }
                  }
                  NodeProperties();
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case COMMA:
                    comma = jj_consume_token(COMMA);
                                          SimpleNode jjtn008 = new SimpleNode(JJTCOMMA);
                                          boolean jjtc008 = true;
                                          jjtree.openNodeScope(jjtn008);
                    try {
                                          jjtree.closeNodeScope(jjtn008, true);
                                          jjtc008 = false;
                                         jjtn008.val = comma.image;
                    } finally {
                                          if (jjtc008) {
                                            jjtree.closeNodeScope(jjtn008, true);
                                          }
                    }
                    NodeLabel();
                    break;
                  default:
                    jj_la1[15] = jj_gen;
                    ;
                  }
                  break;
                default:
                  jj_la1[16] = jj_gen;
                  ;
                }
                break;
              default:
                jj_la1[22] = jj_gen;
                if (jj_2_8(2)) {
                  NodeProperties();
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case COMMA:
                    comma = jj_consume_token(COMMA);
                                    SimpleNode jjtn009 = new SimpleNode(JJTCOMMA);
                                    boolean jjtc009 = true;
                                    jjtree.openNodeScope(jjtn009);
                    try {
                                    jjtree.closeNodeScope(jjtn009, true);
                                    jjtc009 = false;
                                   jjtn009.val = comma.image;
                    } finally {
                                    if (jjtc009) {
                                      jjtree.closeNodeScope(jjtn009, true);
                                    }
                    }
                    NodeLabel();
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case COMMA:
                      comma = jj_consume_token(COMMA);
                                          SimpleNode jjtn010 = new SimpleNode(JJTCOMMA);
                                          boolean jjtc010 = true;
                                          jjtree.openNodeScope(jjtn010);
                      try {
                                          jjtree.closeNodeScope(jjtn010, true);
                                          jjtc010 = false;
                                         jjtn010.val = comma.image;
                      } finally {
                                          if (jjtc010) {
                                            jjtree.closeNodeScope(jjtn010, true);
                                          }
                      }
                      NodeDegree();
                      break;
                    default:
                      jj_la1[17] = jj_gen;
                      ;
                    }
                    break;
                  default:
                    jj_la1[18] = jj_gen;
                    ;
                  }
                } else {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case OSQBR:
                    NodeProperties();
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case COMMA:
                      comma = jj_consume_token(COMMA);
                                            SimpleNode jjtn011 = new SimpleNode(JJTCOMMA);
                                            boolean jjtc011 = true;
                                            jjtree.openNodeScope(jjtn011);
                      try {
                                            jjtree.closeNodeScope(jjtn011, true);
                                            jjtc011 = false;
                                           jjtn011.val = comma.image;
                      } finally {
                                            if (jjtc011) {
                                              jjtree.closeNodeScope(jjtn011, true);
                                            }
                      }
                      NodeDegree();
                      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                      case COMMA:
                        comma = jj_consume_token(COMMA);
                                          SimpleNode jjtn012 = new SimpleNode(JJTCOMMA);
                                          boolean jjtc012 = true;
                                          jjtree.openNodeScope(jjtn012);
                        try {
                                          jjtree.closeNodeScope(jjtn012, true);
                                          jjtc012 = false;
                                         jjtn012.val = comma.image;
                        } finally {
                                          if (jjtc012) {
                                            jjtree.closeNodeScope(jjtn012, true);
                                          }
                        }
                        NodeLabel();
                        break;
                      default:
                        jj_la1[19] = jj_gen;
                        ;
                      }
                      break;
                    default:
                      jj_la1[20] = jj_gen;
                      ;
                    }
                    break;
                  default:
                    jj_la1[23] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              }
            }
          }
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
	== FILTER NODE PARAMETER LABEL ==
*/
  static final public void NodeLabel() throws ParseException {
 /*@bgen(jjtree) NodeLabel */
        SimpleNode jjtn000 = new SimpleNode(JJTNODELABEL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token label, eq;
    try {
      label = jj_consume_token(LABEL);
                            SimpleNode jjtn001 = new SimpleNode(JJTLABEL);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
      try {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtc001 = false;
                           jjtn001.val = label.image;
      } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
      }
      eq = jj_consume_token(EQ);
                      SimpleNode jjtn002 = new SimpleNode(JJTEQUAL);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
      try {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtc002 = false;
                     jjtn002.val = eq.image;
      } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
      }
      Value();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
	== FILTER NODE PARAMETER DEGREE ==
*/
  static final public void NodeDegree() throws ParseException {
 /*@bgen(jjtree) NodeDegree */
        SimpleNode jjtn000 = new SimpleNode(JJTNODEDEGREE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token degree;
    try {
      degree = jj_consume_token(DEGREE);
                              SimpleNode jjtn001 = new SimpleNode(JJTDEGREE);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
      try {
                              jjtree.closeNodeScope(jjtn001, true);
                              jjtc001 = false;
                             jjtn001.val = degree.image;
      } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
      }
      CompareValues();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
	== TYPES OF VALUES: STRING OR NUMBER ==
*/
  static final public void Value() throws ParseException {
 /*@bgen(jjtree) Value */
        SimpleNode jjtn000 = new SimpleNode(JJTVALUE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token s, i, f;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        s = jj_consume_token(STRING);
                         SimpleNode jjtn001 = new SimpleNode(JJTSTRING);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
        try {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                        jjtn001.val = s.image;
        } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
        }
        break;
      case INTEGER:
        i = jj_consume_token(INTEGER);
                      SimpleNode jjtn002 = new SimpleNode(JJTINTEGER);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
        try {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtc002 = false;
                     jjtn002.val = i.image;
        } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
        }
        break;
      case FLOAT:
        f = jj_consume_token(FLOAT);
                    SimpleNode jjtn003 = new SimpleNode(JJTFLOAT);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
        try {
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                   jjtn003.val = f.image;
        } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                    }
        }
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
	== SEARCH ==
*/
  static final public void SearchGraph() throws ParseException {
 /*@bgen(jjtree) SearchGraph */
        SimpleNode jjtn000 = new SimpleNode(JJTSEARCHGRAPH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token v, d, opar, v1, comma, v2, cpar, scol;
    try {
      v = jj_consume_token(VARIABLE);
                           SimpleNode jjtn001 = new SimpleNode(JJTVARIABLE);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
      try {
                           jjtree.closeNodeScope(jjtn001, true);
                           jjtc001 = false;
                          jjtn001.val = v.image;
      } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                           }
      }
      d = jj_consume_token(DOT);
                      SimpleNode jjtn002 = new SimpleNode(JJTDOT);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
      try {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtc002 = false;
                     jjtn002.val = d.image;
      } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
      }
      SearchType();
      opar = jj_consume_token(OPAR);
                          SimpleNode jjtn003 = new SimpleNode(JJTOPENPARENTHESIS);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
      try {
                          jjtree.closeNodeScope(jjtn003, true);
                          jjtc003 = false;
                         jjtn003.val = opar.image;
      } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                          }
      }
      v1 = jj_consume_token(VARIABLE);
                            SimpleNode jjtn004 = new SimpleNode(JJTVARIABLE);
                            boolean jjtc004 = true;
                            jjtree.openNodeScope(jjtn004);
      try {
                            jjtree.closeNodeScope(jjtn004, true);
                            jjtc004 = false;
                           jjtn004.val = v1.image;
      } finally {
                            if (jjtc004) {
                              jjtree.closeNodeScope(jjtn004, true);
                            }
      }
      comma = jj_consume_token(COMMA);
                            SimpleNode jjtn005 = new SimpleNode(JJTCOMMA);
                            boolean jjtc005 = true;
                            jjtree.openNodeScope(jjtn005);
      try {
                            jjtree.closeNodeScope(jjtn005, true);
                            jjtc005 = false;
                           jjtn005.val = comma.image;
      } finally {
                            if (jjtc005) {
                              jjtree.closeNodeScope(jjtn005, true);
                            }
      }
      v2 = jj_consume_token(VARIABLE);
                            SimpleNode jjtn006 = new SimpleNode(JJTVARIABLE);
                            boolean jjtc006 = true;
                            jjtree.openNodeScope(jjtn006);
      try {
                            jjtree.closeNodeScope(jjtn006, true);
                            jjtc006 = false;
                           jjtn006.val = v2.image;
      } finally {
                            if (jjtc006) {
                              jjtree.closeNodeScope(jjtn006, true);
                            }
      }
      MoreOptions();
      cpar = jj_consume_token(CPAR);
                          SimpleNode jjtn007 = new SimpleNode(JJTCLOSEPARENTHESIS);
                          boolean jjtc007 = true;
                          jjtree.openNodeScope(jjtn007);
      try {
                          jjtree.closeNodeScope(jjtn007, true);
                          jjtc007 = false;
                         jjtn007.val = cpar.image;
      } finally {
                          if (jjtc007) {
                            jjtree.closeNodeScope(jjtn007, true);
                          }
      }
      scol = jj_consume_token(SCOL);
                          SimpleNode jjtn008 = new SimpleNode(JJTSEMICOLON);
                          boolean jjtc008 = true;
                          jjtree.openNodeScope(jjtn008);
      try {
                          jjtree.closeNodeScope(jjtn008, true);
                          jjtc008 = false;
                         jjtn008.val = scol.image;
      } finally {
                          if (jjtc008) {
                            jjtree.closeNodeScope(jjtn008, true);
                          }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
	== SEARCH TYPE ==
*/
  static final public void SearchType() throws ParseException {
 /*@bgen(jjtree) SearchType */
        SimpleNode jjtn000 = new SimpleNode(JJTSEARCHTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token sp;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHORTESTPATH:
        sp = jj_consume_token(SHORTESTPATH);
                                SimpleNode jjtn001 = new SimpleNode(JJTSHORTESTPATH);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
        try {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtc001 = false;
                               jjtn001.val = sp.image;
        } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
        }
        break;
      case DEPTHSEARCH:
        sp = jj_consume_token(DEPTHSEARCH);
                               SimpleNode jjtn002 = new SimpleNode(JJTDEPTHSEARCH);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
        try {
                               jjtree.closeNodeScope(jjtn002, true);
                               jjtc002 = false;
                              jjtn002.val = sp.image;
        } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002, true);
                               }
        }
        break;
      case BREADTHSEARCH:
        sp = jj_consume_token(BREADTHSEARCH);
                                 SimpleNode jjtn003 = new SimpleNode(JJTBREADTHSEARCH);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
        try {
                                 jjtree.closeNodeScope(jjtn003, true);
                                 jjtc003 = false;
                                jjtn003.val = sp.image;
        } finally {
                                 if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003, true);
                                 }
        }
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
	== MORE OPTIONS ==
*/
  static final public void MoreOptions() throws ParseException {
 /*@bgen(jjtree) MoreOptions */
        SimpleNode jjtn000 = new SimpleNode(JJTMOREOPTIONS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token comma;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        comma = jj_consume_token(COMMA);
                                    SimpleNode jjtn001 = new SimpleNode(JJTCOMMA);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
        try {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtc001 = false;
                                   jjtn001.val = comma.image;
        } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                    }
        }
        NodeProperties();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
 	== FILTER NODE PARAMETER PROPERTIES ==
*/
  static final public void NodeProperties() throws ParseException {
 /*@bgen(jjtree) NodeProperties */
        SimpleNode jjtn000 = new SimpleNode(JJTNODEPROPERTIES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token comma, osqbr, csqbr, key;
    try {
      osqbr = jj_consume_token(OSQBR);
                            SimpleNode jjtn001 = new SimpleNode(JJTOPENSQUAREBRACKET);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
      try {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtc001 = false;
                           jjtn001.val = osqbr.image;
      } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
      }
      key = jj_consume_token(VARIABLE);
                             SimpleNode jjtn002 = new SimpleNode(JJTVARIABLE);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
      try {
                             jjtree.closeNodeScope(jjtn002, true);
                             jjtc002 = false;
                            jjtn002.val = key.image;
      } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002, true);
                             }
      }
      CompareValues();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_2;
        }
        comma = jj_consume_token(COMMA);
                            SimpleNode jjtn003 = new SimpleNode(JJTCOMMA);
                            boolean jjtc003 = true;
                            jjtree.openNodeScope(jjtn003);
        try {
                            jjtree.closeNodeScope(jjtn003, true);
                            jjtc003 = false;
                           jjtn003.val = comma.image;
        } finally {
                            if (jjtc003) {
                              jjtree.closeNodeScope(jjtn003, true);
                            }
        }
        key = jj_consume_token(VARIABLE);
                             SimpleNode jjtn004 = new SimpleNode(JJTVARIABLE);
                             boolean jjtc004 = true;
                             jjtree.openNodeScope(jjtn004);
        try {
                             jjtree.closeNodeScope(jjtn004, true);
                             jjtc004 = false;
                            jjtn004.val = key.image;
        } finally {
                             if (jjtc004) {
                               jjtree.closeNodeScope(jjtn004, true);
                             }
        }
        CompareValues();
      }
      csqbr = jj_consume_token(CSQBR);
                            SimpleNode jjtn005 = new SimpleNode(JJTCLOSESQUAREBRACKET);
                            boolean jjtc005 = true;
                            jjtree.openNodeScope(jjtn005);
      try {
                            jjtree.closeNodeScope(jjtn005, true);
                            jjtc005 = false;
                           jjtn005.val = csqbr.image;
      } finally {
                            if (jjtc005) {
                              jjtree.closeNodeScope(jjtn005, true);
                            }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
	== DEFINE WAYS TO COMPARE VARIABLE WITH VALUES ==
*/
  static final public void CompareValues() throws ParseException {
 /*@bgen(jjtree) CompareValues */
        SimpleNode jjtn000 = new SimpleNode(JJTCOMPAREVALUES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token eq, os, s, i, f, cs, comma, comp;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        // Equals to an Interval
                eq = jj_consume_token(EQ);
                      SimpleNode jjtn001 = new SimpleNode(JJTEQUAL);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
        try {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                     jjtn001.val = eq.image;
        } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                      }
        }
        IntervalBracket();
        DataToCompare();
        comma = jj_consume_token(COMMA);
                            SimpleNode jjtn002 = new SimpleNode(JJTCOMMA);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
        try {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtc002 = false;
                           jjtn002.val = comma.image;
        } finally {
                            if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002, true);
                            }
        }
        Value();
        IntervalBracket();
        break;
      case COMP:
        // Compares to a Value
                comp = jj_consume_token(COMP);
                          SimpleNode jjtn003 = new SimpleNode(JJTCOMPARES);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
        try {
                          jjtree.closeNodeScope(jjtn003, true);
                          jjtc003 = false;
                         jjtn003.val = comp.image;
        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                          }
        }
        DataToCompare();
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
	== INTERVAL BRACKET ==
*/
  static final public void IntervalBracket() throws ParseException {
 /*@bgen(jjtree) IntervalBracket */
        SimpleNode jjtn000 = new SimpleNode(JJTINTERVALBRACKET);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token os, cs;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OSQBR:
        os = jj_consume_token(OSQBR);
                         SimpleNode jjtn001 = new SimpleNode(JJTOPENSQUAREBRACKET);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
        try {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                        jjtn001.val = os.image;
        } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
        }
        break;
      case CSQBR:
        cs = jj_consume_token(CSQBR);
                         SimpleNode jjtn002 = new SimpleNode(JJTCLOSESQUAREBRACKET);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
        try {
                         jjtree.closeNodeScope(jjtn002, true);
                         jjtc002 = false;
                        jjtn002.val = cs.image;
        } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                         }
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
	== DATA TYPE TO COMPARE ==
*/
  static final public void DataToCompare() throws ParseException {
 /*@bgen(jjtree) DataToCompare */
        SimpleNode jjtn000 = new SimpleNode(JJTDATATOCOMPARE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token s, i, f;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        s = jj_consume_token(STRING);
                         SimpleNode jjtn001 = new SimpleNode(JJTSTRING);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
        try {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                        jjtn001.val = s.image;
        } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
        }
        break;
      case INTEGER:
        i = jj_consume_token(INTEGER);
                          SimpleNode jjtn002 = new SimpleNode(JJTINTEGER);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
        try {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                         jjtn002.val = i.image;
        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
        }
        break;
      case FLOAT:
        f = jj_consume_token(FLOAT);
                        SimpleNode jjtn003 = new SimpleNode(JJTFLOAT);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
        try {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                       jjtn003.val = f.image;
        } finally {
                        if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003, true);
                        }
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(LABEL)) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(NODE)) return true;
    if (jj_scan_token(OSQBR)) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    }
    }
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(SCOL)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(NODE)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(OSQBR)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(EDGE)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(GRAPH)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(NODE)) return true;
    if (jj_scan_token(OSQBR)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(COMP)) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) jj_scanpos = xsp;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(DEGREE)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(NODE)) return true;
    if (jj_scan_token(OSQBR)) return true;
    if (jj_scan_token(CSQBR)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(NODE)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(EDGE)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(GRAPH)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CronusGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000000,0x3c00000,0x1400000,0x800000,0x1400000,0x800000,0x1c00000,0x0,0x2800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x800,0x0,0xc00,0x1c000000,0xe000,0x0,0x0,0x0,0x0,0x1c000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0,0x0,0x2,0x2,0x0,0x0,0x20,0x20,0x240,0x6,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CronusGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CronusGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CronusGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CronusGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CronusGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CronusGrammar(CronusGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CronusGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

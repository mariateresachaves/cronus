/* Generated By:JavaCC: Do not edit this line. CronusGrammar.java */
package main;

import java.io.PrintStream;
import javax.management.BadStringOperationException;

public class CronusGrammar implements CronusGrammarConstants {
  public static void main(String args []) throws ParseException, TokenMgrError
  {
    CronusGrammar parser = new CronusGrammar(System.in);
    parser.Start(System.out);
  }

  final public void Start(PrintStream printStream) throws ParseException {
        String previousValue;
          printStream.println("New Graph");
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
      case VARIABLE:
        previousValue = NewGraph();
          printStream.println( previousValue);
        break;
      case NODE:
        previousValue = ListNodes();
          printStream.println( previousValue);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
      case NODE:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
          printStream.println("--- End of program ---");
  }

  final public String NewGraph() throws ParseException {
        Token v;
        String graphVar, pathVar, valueLeft, valueRight=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH:
      valueLeft = Declaration();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        valueRight = NewGraphRight();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(SCOL);
          if (valueRight == null)
                        {if (true) return String.format("%s;", valueLeft);}
          else
                        {if (true) return String.format("%s = %s;", valueLeft, valueRight);}
      break;
    case VARIABLE:
      v = jj_consume_token(VARIABLE);
                          valueLeft = v.image;
      jj_consume_token(EQ);
      valueRight = NewGraphRight();
      jj_consume_token(SCOL);
          if (valueRight == null)
                        {if (true) return String.format("%s;", valueLeft);}
          else
                        {if (true) return String.format("%s = %s;", valueLeft, valueRight);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Declaration() throws ParseException {
  Token g, v;
    g = jj_consume_token(GRAPH);
    v = jj_consume_token(VARIABLE);
          {if (true) return String.format("%s %s", g.image, v.image);}
    throw new Error("Missing return statement in function");
  }

  final public String NewGraphRight() throws ParseException {
  Token n, g, p, opar, cpar;
    n = jj_consume_token(NEW);
    g = jj_consume_token(GRAPH);
    opar = jj_consume_token(OPAR);
    p = jj_consume_token(PATH);
    cpar = jj_consume_token(CPAR);
          {if (true) return String.format("%s %s%s%s%s", n.image, g.image, opar.image, p.image, cpar.image);}
    throw new Error("Missing return statement in function");
  }

  final public String ListNodes() throws ParseException {
        Token v;
        String graphVar, pathVar, valueLeft, valueRight=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NODE:
      valueLeft = NodeListDec();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        valueRight = ListNodesRight();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(SCOL);
          if (valueRight == null)
                        {if (true) return String.format("%s;", valueLeft);}
          else
                        {if (true) return String.format("%s = %s;", valueLeft, valueRight);}
      break;
    case VARIABLE:
      v = jj_consume_token(VARIABLE);
                          valueLeft = v.image;
      jj_consume_token(EQ);
      valueRight = ListNodesRight();
      jj_consume_token(SCOL);
          if (valueRight == null)
                        {if (true) return String.format("%s;", valueLeft);}
          else
                        {if (true) return String.format("%s = %s;", valueLeft, valueRight);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String NodeListDec() throws ParseException {
        Token n, obr, cbr, v;
    n = jj_consume_token(NODE);
    obr = jj_consume_token(OSQBR);
    cbr = jj_consume_token(CSQBR);
    v = jj_consume_token(VARIABLE);
          {if (true) return String.format("%s%s%s %s", n.image, obr.image, cbr.image, v.image);}
    throw new Error("Missing return statement in function");
  }

  final public String ListNodesRight() throws ParseException {
        Token v, d, n, o, c;
        String parValue = null;
    v = jj_consume_token(VARIABLE);
    d = jj_consume_token(DOT);
    n = jj_consume_token(NODES);
    o = jj_consume_token(OBR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      parValue = ParametersNode();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    c = jj_consume_token(CBR);
                if(parValue == null)
                        {if (true) return String.format("%s%s%s%s%s", v.image, d.image, n.image, o.image, c.image);}
                else
                        {if (true) return String.format("%s%s%s%s%s%s", v.image, d.image, n.image, o.image, parValue, c.image);}
    throw new Error("Missing return statement in function");
  }

  final public String ParametersNode() throws ParseException {
        Token label, eq, quote, string, comma, osqbr, csqbr, comp, key;
        String value, returnValue;
    label = jj_consume_token(LABEL);
    eq = jj_consume_token(EQ);
    string = jj_consume_token(VARIABLE);
    comma = jj_consume_token(COMMA);
    osqbr = jj_consume_token(OSQBR);
    key = jj_consume_token(VARIABLE);
    comp = jj_consume_token(COMP);
    value = Value();
          returnValue = String.format("%s%s%s%s %s%s%s%s", label.image, eq.image, string.image,
                                       comma.image, osqbr.image, key.image, comp.image, value);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      comma = jj_consume_token(COMMA);
      key = jj_consume_token(VARIABLE);
      comp = jj_consume_token(COMP);
      value = Value();
                  returnValue += String.format("%s %s%s%s", comma.image, key.image, comp.image, value);
    }
    csqbr = jj_consume_token(CSQBR);
                returnValue += csqbr.image;
                {if (true) return returnValue;}
    throw new Error("Missing return statement in function");
  }

  final public String Value() throws ParseException {
  Token s, i, f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      s = jj_consume_token(STRING);
          {if (true) return String.format("%s", s.image);}
      break;
    case INTEGER:
      i = jj_consume_token(INTEGER);
          {if (true) return String.format("%s", i.image);}
      break;
    case FLOAT:
      f = jj_consume_token(FLOAT);
          {if (true) return String.format("%s", f.image);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public CronusGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x580000,0x580000,0x0,0x480000,0x0,0x500000,0x400,0x0,0x3800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x8,0x0,0x8,0x0,0x0,0x4,0x0,};
   }

  /** Constructor with InputStream. */
  public CronusGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CronusGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CronusGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CronusGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CronusGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CronusGrammar(CronusGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CronusGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}

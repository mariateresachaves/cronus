/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CronusGrammar.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  	STATIC = true;
	LOOKAHEAD = 1;
}

PARSER_BEGIN(CronusGrammar)
package main;

public class CronusGrammar/*@bgen(jjtree)*/implements CronusGrammarTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTCronusGrammarState jjtree = new JJTCronusGrammarState();

/*@egen*/
  public static void main(String args []) throws ParseException, TokenMgrError
  {
    CronusGrammar parser = new CronusGrammar(System.in);
    SimpleNode root = parser.Start();
    root.dump("");
    
  }
}

PARSER_END(CronusGrammar)

SKIP :
{
  	" "
|  "\n"
| 	"\r"
| 	"\r\n"
}

TOKEN : /* --- LITERALS --- */
{
	< #DIGIT   : ["0"-"9"] >
| 	< #LOWER   : ["a"-"z"] >
| 	< #UPPER   : ["A"-"Z"] >
}

TOKEN : /* --- RESERVED WORDS --- */
{
  	< NEW           : "new">
| 	< BOOL          : "true" | "false" >
|   < LABEL         : "label" >
|   < DEGREE        : "degree" >
|   < WEIGHT        : "weight" >
|   < SHORTESTPATH  : "shortestPath" >
|   < DEPTHSEARCH   : "depthSearch" >
|   < BREADTHSEARCH : "breadthSearch" >
|   < IN            : "in" >
|   < OUT           : "out" >
|   < EDGES         : "edges" >
|   < EDGEF         : "edge" >
|   < NODES         : "nodes" >
|   < NODEF         : "node" >
}

TOKEN : /* --- CLASSES --- */
{
  	< GRAPH    : "Graph" >
| 	< NODE     : "Node" >
| 	< EDGE     : "Edge" >
| 	< VARIABLE : ("_" | < LOWER > | < UPPER > )+ ("_" | < LOWER > | < UPPER > | < DIGIT > )* >
|   < STRING   : "\"" (~["\"", "\\"] | "\\\"" | "\\\\")* "\"" >
| 	< INTEGER  : ("+" | "-")? (< DIGIT >)+ >
| 	< FLOAT    : ("+" | "-")? ((< DIGIT >)*".")?(< DIGIT >)+ >
}

TOKEN : /*--- OPERATORS --- */
{
   	< OPAR    : "(" > 
| 	< CPAR    : ")" >
| 	< OBR     : "{" >
| 	< CBR     : "}" >
| 	< OSQBR   : "[" >
| 	< CSQBR   : "]" >
| 	< COL     : ":" >
| 	< SCOL    : ";" >
| 	< COMMA   : "," >
| 	< EQ      : "=" >
| 	< DOT     : "." >
| 	< QUOTE   : "\"" | "'" >
| 	< COMP    : ">" | "<" | "<=" | ">=" | "==" >
}

TOKEN : /* --- FUNCTIONS --- */
{
  	< PATH : ("\"" | "'") ( ( (< LOWER > | < UPPER >) ":")? ("\\"(< LOWER > | < UPPER > | < DIGIT > | "_" | "." | "-")+ )+("\\")?
    	   | ("/")?((< LOWER > | < UPPER > | < DIGIT > | "_" | "." | "-")+"/")+("/")? )
        	("\"" | "'") >
}

/*
	== START FUNCTION ==
*/
SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token scol;
}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
 	(
 	    LOOKAHEAD(3)
    	Declaration() 
|
		LOOKAHEAD(2)
    	NewGraph()
|
		LOOKAHEAD(2)
   		ListNodes()
|
   		SearchGraph()
  	)+
  	< EOF >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
  	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== DECLARATION OF VARIABLES ==
*/
void Declaration()              :
{/*@bgen(jjtree) DECLARATION */
        SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token g, v, scol;
}
{/*@bgen(jjtree) DECLARATION */
        try {
/*@egen*/
  	(
  	  	g = < GRAPH >/*@bgen(jjtree) GRAPH */
                              {
                                SimpleNode jjtn001 = new SimpleNode(JJTGRAPH);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtc001 = false;
                              }
/*@egen*/ {jjtn001.val = g.image;}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
                              }
/*@egen*/       
		v = <VARIABLE >/*@bgen(jjtree) VARIABLE */
                                {
                                  SimpleNode jjtn002 = new SimpleNode(JJTVARIABLE);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn002, true);
                                  jjtc002 = false;
                                }
/*@egen*/ {jjtn002.val = v.image;}/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002, true);
                                  }
                                }
/*@egen*/          
		scol = < SCOL >/*@bgen(jjtree) SCOL */
                                {
                                  SimpleNode jjtn003 = new SimpleNode(JJTSCOL);
                                  boolean jjtc003 = true;
                                  jjtree.openNodeScope(jjtn003);
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn003, true);
                                  jjtc003 = false;
                                }
/*@egen*/ {jjtn003.val = scol.image;}/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc003) {
                                    jjtree.closeNodeScope(jjtn003, true);
                                  }
                                }
/*@egen*/        	)
|
	Edge()
|
	LOOKAHEAD(2)
	Node()
|
	ListNode()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== EDGE DECLARATION ==
*/
void Edge() :
{/*@bgen(jjtree) Edge */
        SimpleNode jjtn000 = new SimpleNode(JJTEDGE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token e, v;
}
{/*@bgen(jjtree) Edge */
        try {
/*@egen*/
  	e = < EDGE > {jjtn000.val = e.image;}
  	v = <VARIABLE >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.val = v.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== NODE DECLARATION ==
*/
void Node() :
{/*@bgen(jjtree) Node */
        SimpleNode jjtn000 = new SimpleNode(JJTNODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token n, v;
}
{/*@bgen(jjtree) Node */
        try {
/*@egen*/
  	n = < NODE > {jjtn000.val = n.image;}
  	v = < VARIABLE >/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {jjtn000.val = v.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== LIST OF NODES DECLARATION ==
*/
void ListNode() :
{/*@bgen(jjtree) ListNode */
        SimpleNode jjtn000 = new SimpleNode(JJTLISTNODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token n, osqbr, csqbr, v;
}
{/*@bgen(jjtree) ListNode */
        try {
/*@egen*/
  	n = < NODE > {jjtn000.val = n.image;}
  	osqbr = < OSQBR > {jjtn000.val = osqbr.image;}
  	csqbr = < CSQBR > {jjtn000.val = csqbr.image;}
  	v = < VARIABLE >/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {jjtn000.val = v.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== NEW GRAPH ==
*/
void NewGraph()           :
{/*@bgen(jjtree) NEWGRAPH */
        SimpleNode jjtn000 = new SimpleNode(JJTNEWGRAPH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token eq, scol, v;
}
{/*@bgen(jjtree) NEWGRAPH */
        try {
/*@egen*/
  	(	Declaration()
  	|
  		v = < VARIABLE > {jjtn000.val = v.image;}
  	)
	eq = < EQ > {jjtn000.val = eq.image;}
	NewGraphRight()
  	scol = < SCOL >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.val = scol.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== RIGHT HAND SIDE OF A NEW GRAPH ==
*/
void NewGraphRight()                :
{/*@bgen(jjtree) NEWGRAPHRIGHT */
  SimpleNode jjtn000 = new SimpleNode(JJTNEWGRAPHRIGHT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token n, g, p, opar, cpar;
}
{/*@bgen(jjtree) NEWGRAPHRIGHT */
        try {
/*@egen*/
  	n    = < NEW > {jjtn000.val = n.image;}
  	g    = < GRAPH > {jjtn000.val = g.image;}
  	opar = < OPAR > {jjtn000.val = opar.image;}
  	p    = < PATH > {jjtn000.val = p.image;}
  	cpar = < CPAR >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.val = cpar.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== LIST ALL NODES ACCORDING TWO PARAMETERS (IF ANY) ==
*/
void ListNodes()            :
{/*@bgen(jjtree) LISTNODES */
        SimpleNode jjtn000 = new SimpleNode(JJTLISTNODES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token eq, scol, v;
}
{/*@bgen(jjtree) LISTNODES */
        try {
/*@egen*/
  	NodeListDec()
  	(
    	eq = < EQ > {jjtn000.val = eq.image;}
    	ListNodesRight()
  	)?
  	scol = < SCOL >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.val = scol.image;}
|
	v = < VARIABLE > {jjtn000.val = v.image;}
  	eq = < EQ > {jjtn000.val = eq.image;}
  	ListNodesRight()
  	scol = < SCOL >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.val = scol.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== NODE LIST DECLARATION ==
*/
void NodeListDec()                      :
{/*@bgen(jjtree) NODELISTDECLARATION */
  SimpleNode jjtn000 = new SimpleNode(JJTNODELISTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token n, obr, cbr, v;
}
{/*@bgen(jjtree) NODELISTDECLARATION */
  try {
/*@egen*/
  n = < NODE > {jjtn000.val = n.image;}
  obr = < OSQBR > {jjtn000.val = obr.image;}
  cbr = < CSQBR > {jjtn000.val = cbr.image;}
  v = < VARIABLE >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.val = v.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*
	== RIGHT SIDE OF DECLARATION TO GET LIST OF NODES ==
*/
void ListNodesRight()                 :
{/*@bgen(jjtree) LISTNODESRIGHT */
        SimpleNode jjtn000 = new SimpleNode(JJTLISTNODESRIGHT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token v, d, n, o, c;
}
{/*@bgen(jjtree) LISTNODESRIGHT */
        try {
/*@egen*/
  	v = < VARIABLE > {jjtn000.val = v.image;}
  	d = < DOT > {jjtn000.val = d.image;}
  	n = < NODES > {jjtn000.val = n.image;}
  	o = < OPAR > {jjtn000.val = o.image;}
  	( AllParametersNode() )?
  	c = < CPAR >/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.val = c.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== FILTER SEARCH NODE WITH ALL THREE PARAMETERS ==
*/
void AllParametersNode()                    :
{/*@bgen(jjtree) ALLPARAMETERSNODE */
  SimpleNode jjtn000 = new SimpleNode(JJTALLPARAMETERSNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token comma;
}
{/*@bgen(jjtree) ALLPARAMETERSNODE */
        try {
/*@egen*/
  	LOOKAHEAD(2)
	NodeLabel()
  	(
    	comma = < COMMA > {jjtn000.val = comma.image;}
    	NodeDegree()
	    (
	      comma = < COMMA > {jjtn000.val = comma.image;}
	      NodeProperties()
	    )?
    )?
|
	NodeLabel()
  	(
	    
	    comma = < COMMA > {jjtn000.val = comma.image;}
    	NodeProperties()
	    (
	      comma = < COMMA > {jjtn000.val = comma.image;}
	      NodeDegree()
	    )?
    )?
|
	LOOKAHEAD(2)
	NodeDegree()
  	(
    	comma = < COMMA > {jjtn000.val = comma.image;}
    	NodeLabel()
	    (
	      comma = < COMMA > {jjtn000.val = comma.image;}
	      NodeProperties()
	    )?
    )?
|
	NodeDegree()
  	(
    	comma = < COMMA > {jjtn000.val = comma.image;}
    	NodeProperties()
	    (
	      comma = < COMMA > {jjtn000.val = comma.image;}
	      NodeLabel()
	    )?
    )?
|
	LOOKAHEAD(2)
	NodeProperties()
  	(
    	comma = < COMMA > {jjtn000.val = comma.image;}
    	NodeLabel()
	    (
	      comma = < COMMA > {jjtn000.val = comma.image;}
	      NodeDegree()
	    )?
    )?
|
	NodeProperties()
  	(
		comma = < COMMA > {jjtn000.val = comma.image;}
    	NodeDegree()
	    (
	      comma = < COMMA > {jjtn000.val = comma.image;}
	      NodeLabel()
	    )?
    )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== FILTER NODE PARAMETER LABEL ==
*/
void NodeLabel() :
{/*@bgen(jjtree) NodeLabel */
  SimpleNode jjtn000 = new SimpleNode(JJTNODELABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token label, eq;
}
{/*@bgen(jjtree) NodeLabel */
  try {
/*@egen*/
  label = < LABEL > {jjtn000.val = label.image;}
  eq = < EQ > {jjtn000.val = eq.image;}
  Value()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*
	== FILTER NODE PARAMETER DEGREE ==
*/
void NodeDegree() :
{/*@bgen(jjtree) NodeDegree */
  SimpleNode jjtn000 = new SimpleNode(JJTNODEDEGREE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token degree;
}
{/*@bgen(jjtree) NodeDegree */
  try {
/*@egen*/
  degree = < DEGREE > {jjtn000.val = degree.image;}
  CompareValues()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*
	== TYPES OF VALUES: STRING OR NUMBER ==
*/
void Value() :
{/*@bgen(jjtree) Value */
  SimpleNode jjtn000 = new SimpleNode(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token s, i, f;
}
{/*@bgen(jjtree) Value */
        try {
/*@egen*/
  	s = < STRING >/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {jjtn000.val = s.image;}
|   i = < INTEGER >/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {jjtn000.val = i.image;}
|   f = < FLOAT >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.val = f.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
/*
	== SEARCH ==
*/
void SearchGraph()              :
{/*@bgen(jjtree) SEARCHGRAPH */
        SimpleNode jjtn000 = new SimpleNode(JJTSEARCHGRAPH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token v, d, scol;
}
{/*@bgen(jjtree) SEARCHGRAPH */
        try {
/*@egen*/
 	v = < VARIABLE > {jjtn000.val = v.image;}
 	d = < DOT > {jjtn000.val = d.image;}
 	(
 	   	SearchShortestPath()
 	|
 	   	SearchDepth()
 	|
 	   	SearchBreadth()
 	)
 	scol = < SCOL >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.val = scol.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== SEARCHSHORTESTPATH ==
*/
void SearchShortestPath()                     :
{/*@bgen(jjtree) SEARCHSHORTESTPATH */
        SimpleNode jjtn000 = new SimpleNode(JJTSEARCHSHORTESTPATH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token sp, opar, v1, comma, v2, cpar;
}
{/*@bgen(jjtree) SEARCHSHORTESTPATH */
        try {
/*@egen*/
  	sp = < SHORTESTPATH > {jjtn000.val = sp.image;}
  	opar = < OPAR > {jjtn000.val = opar.image;}
  	v1 = < VARIABLE > {jjtn000.val = v1.image;}
  	comma = < COMMA > {jjtn000.val = comma.image;}
  	v2 = < VARIABLE > {jjtn000.val = v2.image;}
	(
	  	comma = < COMMA > {jjtn000.val = comma.image;}
	  	NodeProperties()
	)?
   	cpar = < CPAR >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.val = cpar.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== DEPTHSEARCH ==
*/
void SearchDepth()              :
{/*@bgen(jjtree) DEPTHSEARCH */
        SimpleNode jjtn000 = new SimpleNode(JJTDEPTHSEARCH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token sp, opar, v1, comma, v2, cpar;
}
{/*@bgen(jjtree) DEPTHSEARCH */
        try {
/*@egen*/
  	sp = < DEPTHSEARCH > {jjtn000.val = sp.image;}
  	opar = < OPAR > {jjtn000.val = opar.image;}
  	v1 = < VARIABLE > {jjtn000.val = v1.image;}
  	comma = < COMMA > {jjtn000.val = comma.image;}
  	v2 = < VARIABLE > {jjtn000.val = v2.image;}
	(
	  	comma = < COMMA > {jjtn000.val = comma.image;}
	  	NodeProperties()
	)?
   	cpar = < CPAR >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.val = cpar.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== BREADTHSEARCH ==
*/
void SearchBreadth()                :
{/*@bgen(jjtree) BREADTHSEARCH */
        SimpleNode jjtn000 = new SimpleNode(JJTBREADTHSEARCH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token sp, opar, v1, comma, v2, cpar;
}
{/*@bgen(jjtree) BREADTHSEARCH */
        try {
/*@egen*/
  	sp = < BREADTHSEARCH > {jjtn000.val = sp.image;}
  	opar = < OPAR > {jjtn000.val = opar.image;}
  	v1 = < VARIABLE > {jjtn000.val = v1.image;}
  	comma = < COMMA > {jjtn000.val = comma.image;}
  	v2 = < VARIABLE > {jjtn000.val = v2.image;}
	(
		comma = < COMMA > {jjtn000.val = comma.image;}
	  	NodeProperties()
	)?
  	cpar = < CPAR >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.val = cpar.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
 	== FILTER NODE PARAMETER PROPERTIES ==
*/
void NodeProperties() :
{/*@bgen(jjtree) NodeProperties */
        SimpleNode jjtn000 = new SimpleNode(JJTNODEPROPERTIES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token comma, osqbr, csqbr, key;
}
{/*@bgen(jjtree) NodeProperties */
        try {
/*@egen*/
  	osqbr = < OSQBR > {jjtn000.val = osqbr.image;}
  	key = < VARIABLE > {jjtn000.val = key.image;}
  	CompareValues()
  	(
    	comma = < COMMA > {jjtn000.val = comma.image;}
    	key = < VARIABLE > {jjtn000.val = key.image;}
    	CompareValues()
  	)*
  	csqbr = < CSQBR >/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {jjtn000.val = csqbr.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== DEFINE WAYS TO COMPARE VARIABLE WITH VALUES ==
*/
void CompareValues() :
{/*@bgen(jjtree) CompareValues */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPAREVALUES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token eq, os, s, i, f, cs, comma, comp;
}
{/*@bgen(jjtree) CompareValues */
        try {
/*@egen*/
  	// Equals to an Interval
  	eq = < EQ > {jjtn000.val = eq.image;}
  	(
  	  	os = < OSQBR > {jjtn000.val = os.image;}
  	|
  		cs = < CSQBR > {jjtn000.val = cs.image;})
  	(
  	  	s = < STRING > {jjtn000.val = s.image;}
  	|
  	  	i = < INTEGER > {jjtn000.val = i.image;}
  	|
  	  	f = < FLOAT > {jjtn000.val = f.image;}
  	)
  	comma = < COMMA > {jjtn000.val = comma.image;}
  	Value()
  	(
  	  	os = < OSQBR >/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {jjtn000.val = os.image;}
  	|
  		cs = < CSQBR >/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {jjtn000.val = cs.image;}
  	)
|
	// Compares to a Value
	comp = < COMP > {jjtn000.val = comp.image;}
	(
  	  	s = < STRING >/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {jjtn000.val = s.image;}
  	|
  	  	i = < INTEGER >/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ {jjtn000.val = i.image;}
  	|
  	  	f = < FLOAT >/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {jjtn000.val = f.image;}
  	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
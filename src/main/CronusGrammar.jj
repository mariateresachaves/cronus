/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CronusGrammar.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  	STATIC = true;
	LOOKAHEAD = 1;
}

PARSER_BEGIN(CronusGrammar)
package main;

public class CronusGrammar/*@bgen(jjtree)*/implements CronusGrammarTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTCronusGrammarState jjtree = new JJTCronusGrammarState();

/*@egen*/
  public static void main(String args []) throws ParseException, TokenMgrError
  {
    CronusGrammar parser = new CronusGrammar(System.in);
    SimpleNode root = parser.Start();
    root.dump("");
    
  }
}

PARSER_END(CronusGrammar)

SKIP :
{
  	" "
| 	"\n"
| 	"\r"
| 	"\r\n"
}

TOKEN : /* --- LITERALS --- */
{
	< #DIGIT   : ["0"-"9"] >
| 	< #LOWER   : ["a"-"z"] >
| 	< #UPPER   : ["A"-"Z"] >
}

TOKEN : /* --- RESERVED WORDS --- */
{
  	< NEW           : "new">
| 	< BOOL          : "true" | "false" >
|   < LABEL         : "label" >
|   < DEGREE        : "degree" >
|   < WEIGHT        : "weight" >
|   < SHORTESTPATH  : "shortestPath" >
|   < DEPTHSEARCH   : "depthSearch" >
|   < BREADTHSEARCH : "breadthSearch" >
|   < IN            : "in" >
|   < OUT           : "out" >
|   < EDGES         : "edges" >
|   < EDGEF         : "edge" >
|   < NODES         : "nodes" >
|   < NODEF         : "node" >
}

TOKEN : /* --- CLASSES --- */
{
  	< GRAPH    : "Graph" >
| 	< NODE     : "Node" >
| 	< EDGE     : "Edge" >
| 	< VARIABLE : ("_" | < LOWER > | < UPPER > )+ ("_" | < LOWER > | < UPPER > | < DIGIT > )* >
|   < STRING   : "\"" (~["\"", "\\"] | "\\\"" | "\\\\")* "\"" >
| 	< INTEGER  : ("+" | "-")? (< DIGIT >)+ >
| 	< FLOAT    : ("+" | "-")? ((< DIGIT >)*".")?(< DIGIT >)+ >
}

TOKEN : /*--- OPERATORS --- */
{
   	< OPAR    : "(" > 
| 	< CPAR    : ")" >
| 	< OBR     : "{" >
| 	< CBR     : "}" >
| 	< OSQBR   : "[" >
| 	< CSQBR   : "]" >
| 	< COL     : ":" >
| 	< SCOL    : ";" >
| 	< COMMA   : "," >
| 	< EQ      : "=" >
| 	< DOT     : "." >
| 	< QUOTE   : "\"" | "'" >
| 	< COMP    : ">" | "<" | "<=" | ">=" | "==" >
}

TOKEN : /* --- FUNCTIONS --- */
{
  	< PATH : ("\"" | "'") ( ( (< LOWER > | < UPPER >) ":")? ("\\"(< LOWER > | < UPPER > | < DIGIT > | "_" | "." | "-")+ )+("\\")?
    	   | ("/")?((< LOWER > | < UPPER > | < DIGIT > | "_" | "." | "-")+"/")+("/")? )
        	("\"" | "'") >
}

/*
	== START FUNCTION ==
*/
SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
 	(
 	    LOOKAHEAD(3)
    	Declaration()
|
		LOOKAHEAD(2)
    	NewGraph()
|
		LOOKAHEAD(2)
   		ListNodes()
|
   		SearchGraph()
  	)+
  	< EOF >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
  	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== DECLARATION OF VARIABLES ==
*/
void Declaration()              :
{/*@bgen(jjtree) DECLARATION */
        SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token scol;
}
{/*@bgen(jjtree) DECLARATION */
        try {
/*@egen*/
  	Graph()/*@bgen(jjtree) SCOL */
                {
                  SimpleNode jjtn001 = new SimpleNode(JJTSCOL);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ scol = < SCOL >/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/      /*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ {jjtn000.value = scol.image;}
|
	Edge()/*@bgen(jjtree) SCOL */
               {
                 SimpleNode jjtn002 = new SimpleNode(JJTSCOL);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
               }
               try {
/*@egen*/ scol = < SCOL >/*@bgen(jjtree)*/
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002, true);
                 }
               }
/*@egen*/      /*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ {jjtn000.value = scol.image;}
|
	LOOKAHEAD(2)
	Node()/*@bgen(jjtree) SCOL */
               {
                 SimpleNode jjtn003 = new SimpleNode(JJTSCOL);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
               }
               try {
/*@egen*/ scol = < SCOL >/*@bgen(jjtree)*/
               } finally {
                 if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003, true);
                 }
               }
/*@egen*/      /*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ {jjtn000.value = scol.image;}
|
	ListNode()/*@bgen(jjtree) SCOL */
                   {
                     SimpleNode jjtn004 = new SimpleNode(JJTSCOL);
                     boolean jjtc004 = true;
                     jjtree.openNodeScope(jjtn004);
                   }
                   try {
/*@egen*/ scol = < SCOL >/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc004) {
                       jjtree.closeNodeScope(jjtn004, true);
                     }
                   }
/*@egen*/      /*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                         }
/*@egen*/ {jjtn000.value = scol.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== GRAPH DECLARATION ==
*/
void Graph() :
{/*@bgen(jjtree) Graph */
        SimpleNode jjtn000 = new SimpleNode(JJTGRAPH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token g, v;
}
{/*@bgen(jjtree) Graph */
        try {
/*@egen*//*@bgen(jjtree) GRAPH */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTGRAPH);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
  	g = < GRAPH >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/        {jjtn000.value = g.image;}/*@bgen(jjtree) VARIABLE */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTVARIABLE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
  	v = <VARIABLE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/          /*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ {jjtn000.value = v.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== EDGE DECLARATION ==
*/
void Edge() :
{/*@bgen(jjtree) Edge */
        SimpleNode jjtn000 = new SimpleNode(JJTEDGE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token e, v;
}
{/*@bgen(jjtree) Edge */
        try {
/*@egen*//*@bgen(jjtree) EDGE */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTEDGE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
  	e = < EDGE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/       {jjtn000.value = e.image;}/*@bgen(jjtree) VARIABLE */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTVARIABLE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
  	v = <VARIABLE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/          /*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ {jjtn000.value = v.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== NODE DECLARATION ==
*/
void Node() :
{/*@bgen(jjtree) Node */
        SimpleNode jjtn000 = new SimpleNode(JJTNODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token n, v;
}
{/*@bgen(jjtree) Node */
        try {
/*@egen*//*@bgen(jjtree) NODE */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
  	n = < NODE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/       {jjtn000.value = n.image;}/*@bgen(jjtree) VARIABLE */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTVARIABLE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
  	v = < VARIABLE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/          /*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ {jjtn000.value = v.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== LIST OF NODES DECLARATION ==
*/
void ListNode()           :
{/*@bgen(jjtree) LISTNODE */
        SimpleNode jjtn000 = new SimpleNode(JJTLISTNODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token n, osqbr, csqbr, v;
}
{/*@bgen(jjtree) LISTNODE */
        try {
/*@egen*//*@bgen(jjtree) NODE */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
  	n = < NODE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/       {jjtn000.value = n.image;}/*@bgen(jjtree) OSQBR */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTOSQBR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
  	osqbr = < OSQBR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/        {jjtn000.value = osqbr.image;}/*@bgen(jjtree) CSQBR */
        {
          SimpleNode jjtn003 = new SimpleNode(JJTCSQBR);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/
  	csqbr = < CSQBR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/        {jjtn000.value = csqbr.image;}/*@bgen(jjtree) VARIABLE */
        {
          SimpleNode jjtn004 = new SimpleNode(JJTVARIABLE);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        }
        try {
/*@egen*/
  	v = < VARIABLE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
        }
/*@egen*/          /*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ {jjtn000.value = v.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== NEW GRAPH ==
*/
void NewGraph()           :
{/*@bgen(jjtree) NEWGRAPH */
        SimpleNode jjtn000 = new SimpleNode(JJTNEWGRAPH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token eq, scol, v;
}
{/*@bgen(jjtree) NEWGRAPH */
        try {
/*@egen*/
  	(	Declaration()
  		|/*@bgen(jjtree) VARIABLE */
                {
                  SimpleNode jjtn001 = new SimpleNode(JJTVARIABLE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/
  		v = < VARIABLE >/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/           {jjtn000.value = v.image;}
  	)/*@bgen(jjtree) EQ */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTEQ);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
	eq = < EQ >/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/     {jjtn000.value = eq.image;}
	NewGraphRight()/*@bgen(jjtree) SCOL */
        {
          SimpleNode jjtn003 = new SimpleNode(JJTSCOL);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/
  	scol = < SCOL >/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/      /*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {jjtn000.value = scol.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== RIGHT HAND SIDE OF A NEW GRAPH ==
*/
void NewGraphRight()                :
{/*@bgen(jjtree) NEWGRAPHRIGHT */
  SimpleNode jjtn000 = new SimpleNode(JJTNEWGRAPHRIGHT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token n, g, p, opar, cpar;
}
{/*@bgen(jjtree) NEWGRAPHRIGHT */
        try {
/*@egen*//*@bgen(jjtree) NEW */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTNEW);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
  	n    = < NEW >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/      {jjtn000.value = n.image;}/*@bgen(jjtree) GRAPH */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTGRAPH);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
  	g    = < GRAPH >/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/        {jjtn000.value = g.image;}/*@bgen(jjtree) OPAR */
        {
          SimpleNode jjtn003 = new SimpleNode(JJTOPAR);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/
  	opar = < OPAR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/       {jjtn000.value = opar.image;}/*@bgen(jjtree) PATH */
        {
          SimpleNode jjtn004 = new SimpleNode(JJTPATH);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        }
        try {
/*@egen*/
  	p    = < PATH >/*@bgen(jjtree)*/
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
        }
/*@egen*/       {jjtn000.value = p.image;}/*@bgen(jjtree) CPAR */
        {
          SimpleNode jjtn005 = new SimpleNode(JJTCPAR);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
        }
        try {
/*@egen*/
  	cpar = < CPAR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
        }
/*@egen*/      /*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {jjtn000.value = cpar.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== LIST ALL NODES ACCORDING TWO PARAMETERS (IF ANY) ==
*/
void ListNodes()            :
{/*@bgen(jjtree) LISTNODES */
        SimpleNode jjtn000 = new SimpleNode(JJTLISTNODES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token eq, scol, v;
}
{/*@bgen(jjtree) LISTNODES */
        try {
/*@egen*/
  	NodeListDec()
  	(/*@bgen(jjtree) EQ */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTEQ);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
    	eq = < EQ >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/     {jjtn000.value = eq.image;}
    	ListNodesRight()
  	)?/*@bgen(jjtree) SCOL */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTSCOL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
  	scol = < SCOL >/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/      /*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {jjtn000.value = scol.image;}
|/*@bgen(jjtree) VARIABLE */
        {
          SimpleNode jjtn003 = new SimpleNode(JJTVARIABLE);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/
	v = < VARIABLE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/           {jjtn000.value = v.image;}/*@bgen(jjtree) EQ */
        {
          SimpleNode jjtn004 = new SimpleNode(JJTEQ);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        }
        try {
/*@egen*/
  	eq = < EQ >/*@bgen(jjtree)*/
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
        }
/*@egen*/     {jjtn000.value = eq.image;}
  	ListNodesRight()/*@bgen(jjtree) SCOL */
        {
          SimpleNode jjtn005 = new SimpleNode(JJTSCOL);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
        }
        try {
/*@egen*/
  	scol = < SCOL >/*@bgen(jjtree)*/
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
        }
/*@egen*/      /*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {jjtn000.value = scol.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== NODE LIST DECLARATION ==
*/
void NodeListDec()                      :
{/*@bgen(jjtree) NODELISTDECLARATION */
  SimpleNode jjtn000 = new SimpleNode(JJTNODELISTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token n, obr, cbr, v;
}
{/*@bgen(jjtree) NODELISTDECLARATION */
  try {
/*@egen*//*@bgen(jjtree) NODE */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  n = < NODE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/       {jjtn000.value = n.image;}/*@bgen(jjtree) OSQBR */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTOSQBR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/
  obr = < OSQBR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/        {jjtn000.value = obr.image;}/*@bgen(jjtree) CSQBR */
  {
    SimpleNode jjtn003 = new SimpleNode(JJTCSQBR);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/
  cbr = < CSQBR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/        {jjtn000.value = cbr.image;}/*@bgen(jjtree) VARIABLE */
  {
    SimpleNode jjtn004 = new SimpleNode(JJTVARIABLE);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*/
  v = < VARIABLE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/          /*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {jjtn000.value = v.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*
	== RIGHT SIDE OF DECLARATION TO GET LIST OF NODES ==
*/
void ListNodesRight()                 :
{/*@bgen(jjtree) LISTNODESRIGHT */
        SimpleNode jjtn000 = new SimpleNode(JJTLISTNODESRIGHT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token v, d, n, o, c;
}
{/*@bgen(jjtree) LISTNODESRIGHT */
        try {
/*@egen*//*@bgen(jjtree) VARIABLE */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTVARIABLE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
  	v = < VARIABLE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/           {jjtn000.value = v.image;}/*@bgen(jjtree) DOT */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTDOT);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
  	d = < DOT >/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/      {jjtn000.value = d.image;}/*@bgen(jjtree) NODES */
        {
          SimpleNode jjtn003 = new SimpleNode(JJTNODES);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/
  	n = < NODES >/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/        {jjtn000.value = n.image;}/*@bgen(jjtree) OBR */
        {
          SimpleNode jjtn004 = new SimpleNode(JJTOBR);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        }
        try {
/*@egen*/
  	o = < OPAR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
        }
/*@egen*/      {jjtn000.value = o.image;}
  	( AllParametersNode() )?/*@bgen(jjtree) CBR */
        {
          SimpleNode jjtn005 = new SimpleNode(JJTCBR);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
        }
        try {
/*@egen*/
  	c = < CPAR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
        }
/*@egen*/     /*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {jjtn000.value = c.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== FILTER SEARCH NODE WITH ALL THREE PARAMETERS ==
*/
void AllParametersNode()                    :
{/*@bgen(jjtree) ALLPARAMETERSNODE */
  SimpleNode jjtn000 = new SimpleNode(JJTALLPARAMETERSNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token comma;
}
{/*@bgen(jjtree) ALLPARAMETERSNODE */
        try {
/*@egen*/
  	LOOKAHEAD(2)
	NodeLabel()
  	(/*@bgen(jjtree) COMMA */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTCOMMA);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
    	comma = < COMMA >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/        {jjtn000.value = comma.image;}
    	NodeDegree()
	    (/*@bgen(jjtree) COMMA */
              {
                SimpleNode jjtn002 = new SimpleNode(JJTCOMMA);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
              }
              try {
/*@egen*/
	      comma = < COMMA >/*@bgen(jjtree)*/
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002, true);
                }
              }
/*@egen*/        {jjtn000.value = comma.image;}
	      NodeProperties()
	    )?
    )?
|
	NodeLabel()
  	(/*@bgen(jjtree) COMMA */
            {
              SimpleNode jjtn003 = new SimpleNode(JJTCOMMA);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
            }
            try {
/*@egen*/
	    
	    comma = < COMMA >/*@bgen(jjtree)*/
            } finally {
              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003, true);
              }
            }
/*@egen*/        {jjtn000.value = comma.image;}
    	NodeProperties()
	    (/*@bgen(jjtree) COMMA */
              {
                SimpleNode jjtn004 = new SimpleNode(JJTCOMMA);
                boolean jjtc004 = true;
                jjtree.openNodeScope(jjtn004);
              }
              try {
/*@egen*/
	      comma = < COMMA >/*@bgen(jjtree)*/
              } finally {
                if (jjtc004) {
                  jjtree.closeNodeScope(jjtn004, true);
                }
              }
/*@egen*/        {jjtn000.value = comma.image;}
	      NodeDegree()
	    )?
    )?
|
	LOOKAHEAD(2)
	NodeDegree()
  	(/*@bgen(jjtree) COMMA */
        {
          SimpleNode jjtn005 = new SimpleNode(JJTCOMMA);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
        }
        try {
/*@egen*/
    	comma = < COMMA >/*@bgen(jjtree)*/
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
        }
/*@egen*/        {jjtn000.value = comma.image;}
    	NodeLabel()
	    (/*@bgen(jjtree) COMMA */
              {
                SimpleNode jjtn006 = new SimpleNode(JJTCOMMA);
                boolean jjtc006 = true;
                jjtree.openNodeScope(jjtn006);
              }
              try {
/*@egen*/
	      comma = < COMMA >/*@bgen(jjtree)*/
              } finally {
                if (jjtc006) {
                  jjtree.closeNodeScope(jjtn006, true);
                }
              }
/*@egen*/        {jjtn000.value = comma.image;}
	      NodeProperties()
	    )?
    )?
|
	NodeDegree()
  	(/*@bgen(jjtree) COMMA */
        {
          SimpleNode jjtn007 = new SimpleNode(JJTCOMMA);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
        }
        try {
/*@egen*/
    	comma = < COMMA >/*@bgen(jjtree)*/
        } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
          }
        }
/*@egen*/        {jjtn000.value = comma.image;}
    	NodeProperties()
	    (/*@bgen(jjtree) COMMA */
              {
                SimpleNode jjtn008 = new SimpleNode(JJTCOMMA);
                boolean jjtc008 = true;
                jjtree.openNodeScope(jjtn008);
              }
              try {
/*@egen*/
	      comma = < COMMA >/*@bgen(jjtree)*/
              } finally {
                if (jjtc008) {
                  jjtree.closeNodeScope(jjtn008, true);
                }
              }
/*@egen*/        {jjtn000.value = comma.image;}
	      NodeLabel()
	    )?
    )?
|
	LOOKAHEAD(2)
	NodeProperties()
  	(/*@bgen(jjtree) COMMA */
        {
          SimpleNode jjtn009 = new SimpleNode(JJTCOMMA);
          boolean jjtc009 = true;
          jjtree.openNodeScope(jjtn009);
        }
        try {
/*@egen*/
    	comma = < COMMA >/*@bgen(jjtree)*/
        } finally {
          if (jjtc009) {
            jjtree.closeNodeScope(jjtn009, true);
          }
        }
/*@egen*/        {jjtn000.value = comma.image;}
    	NodeLabel()
	    (/*@bgen(jjtree) COMMA */
              {
                SimpleNode jjtn010 = new SimpleNode(JJTCOMMA);
                boolean jjtc010 = true;
                jjtree.openNodeScope(jjtn010);
              }
              try {
/*@egen*/
	      comma = < COMMA >/*@bgen(jjtree)*/
              } finally {
                if (jjtc010) {
                  jjtree.closeNodeScope(jjtn010, true);
                }
              }
/*@egen*/        {jjtn000.value = comma.image;}
	      NodeDegree()
	    )?
    )?
|
	NodeProperties()
  	(/*@bgen(jjtree) COMMA */
                {
                  SimpleNode jjtn011 = new SimpleNode(JJTCOMMA);
                  boolean jjtc011 = true;
                  jjtree.openNodeScope(jjtn011);
                }
                try {
/*@egen*/
		comma = < COMMA >/*@bgen(jjtree)*/
                } finally {
                  if (jjtc011) {
                    jjtree.closeNodeScope(jjtn011, true);
                  }
                }
/*@egen*/        {jjtn000.value = comma.image;}
    	NodeDegree()
	    (/*@bgen(jjtree) COMMA */
              {
                SimpleNode jjtn012 = new SimpleNode(JJTCOMMA);
                boolean jjtc012 = true;
                jjtree.openNodeScope(jjtn012);
              }
              try {
/*@egen*/
	      comma = < COMMA >/*@bgen(jjtree)*/
              } finally {
                if (jjtc012) {
                  jjtree.closeNodeScope(jjtn012, true);
                }
              }
/*@egen*/        {jjtn000.value = comma.image;}
	      NodeLabel()
	    )?
    )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== FILTER NODE PARAMETER LABEL ==
*/
void NodeLabel() :
{/*@bgen(jjtree) NodeLabel */
  SimpleNode jjtn000 = new SimpleNode(JJTNODELABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token label, eq;
}
{/*@bgen(jjtree) NodeLabel */
  try {
/*@egen*//*@bgen(jjtree) LABEL */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTLABEL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  label = < LABEL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/        {jjtn000.value = label.image;}/*@bgen(jjtree) EQ */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTEQ);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/
  eq = < EQ >/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/     {jjtn000.value = eq.image;}
  Value()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*
	== FILTER NODE PARAMETER DEGREE ==
*/
void NodeDegree() :
{/*@bgen(jjtree) NodeDegree */
  SimpleNode jjtn000 = new SimpleNode(JJTNODEDEGREE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token degree;
}
{/*@bgen(jjtree) NodeDegree */
  try {
/*@egen*//*@bgen(jjtree) DEGREE */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTDEGREE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  degree = < DEGREE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/         {jjtn000.value = degree.image;}
  CompareValues()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*
	== TYPES OF VALUES: STRING OR NUMBER ==
*/
void Value() :
{/*@bgen(jjtree) Value */
  SimpleNode jjtn000 = new SimpleNode(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token s, i, f;
}
{/*@bgen(jjtree) Value */
        try {
/*@egen*//*@bgen(jjtree) STRING */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTSTRING);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
  	s = < STRING >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/        /*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {jjtn000.value = s.image;}
|/*@bgen(jjtree) INTEGER */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTINTEGER);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/   i = < INTEGER >/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/         /*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {jjtn000.value = i.image;}
|/*@bgen(jjtree) FLOAT */
    {
      SimpleNode jjtn003 = new SimpleNode(JJTFLOAT);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/   f = < FLOAT >/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
    }
/*@egen*/       /*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {jjtn000.value = f.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
/*
	== SEARCH ==
*/
void SearchGraph()              :
{/*@bgen(jjtree) SEARCHGRAPH */
        SimpleNode jjtn000 = new SimpleNode(JJTSEARCHGRAPH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token v, d, scol;
}
{/*@bgen(jjtree) SEARCHGRAPH */
        try {
/*@egen*//*@bgen(jjtree) VARIABLE */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTVARIABLE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
 	v = < VARIABLE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/           {jjtn000.value = v.image;}/*@bgen(jjtree) DOT */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTDOT);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
 	d = < DOT >/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/      {jjtn000.value = d.image;}
 	(
 	   	SearchShortestPath()
 	|
 	   	SearchDepth()
 	|
 	   	SearchBreadth()
 	)/*@bgen(jjtree) SCOL */
        {
          SimpleNode jjtn003 = new SimpleNode(JJTSCOL);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/
 	scol = < SCOL >/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/      /*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {jjtn000.value = scol.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== SEARCHSHORTESTPATH ==
*/
void SearchShortestPath()                     :
{/*@bgen(jjtree) SEARCHSHORTESTPATH */
        SimpleNode jjtn000 = new SimpleNode(JJTSEARCHSHORTESTPATH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token sp, opar, v1, comma, v2, cpar;
}
{/*@bgen(jjtree) SEARCHSHORTESTPATH */
        try {
/*@egen*//*@bgen(jjtree) SHORTESTPATH */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTSHORTESTPATH);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
  	sp = < SHORTESTPATH >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/               {jjtn000.value = sp.image;}/*@bgen(jjtree) OPAR */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTOPAR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
  	opar = < OPAR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/       {jjtn000.value = opar.image;}/*@bgen(jjtree) VARIABLE */
        {
          SimpleNode jjtn003 = new SimpleNode(JJTVARIABLE);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/
  	v1 = < VARIABLE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/           {jjtn000.value = v1.image;}/*@bgen(jjtree) COMMA */
        {
          SimpleNode jjtn004 = new SimpleNode(JJTCOMMA);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        }
        try {
/*@egen*/
  	comma = < COMMA >/*@bgen(jjtree)*/
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
        }
/*@egen*/        {jjtn000.value = comma.image;}/*@bgen(jjtree) VARIABLE */
        {
          SimpleNode jjtn005 = new SimpleNode(JJTVARIABLE);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
        }
        try {
/*@egen*/
  	v2 = < VARIABLE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
        }
/*@egen*/           {jjtn000.value = v2.image;}
	(/*@bgen(jjtree) COMMA */
                {
                  SimpleNode jjtn006 = new SimpleNode(JJTCOMMA);
                  boolean jjtc006 = true;
                  jjtree.openNodeScope(jjtn006);
                }
                try {
/*@egen*/
	  	comma = < COMMA >/*@bgen(jjtree)*/
                } finally {
                  if (jjtc006) {
                    jjtree.closeNodeScope(jjtn006, true);
                  }
                }
/*@egen*/        {jjtn000.value = comma.image;}
	  	NodeProperties()
	)?/*@bgen(jjtree) CPAR */
        {
          SimpleNode jjtn007 = new SimpleNode(JJTCPAR);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
        }
        try {
/*@egen*/
   	cpar = < CPAR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
          }
        }
/*@egen*/      /*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {jjtn000.value = cpar.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== DEPTHSEARCH ==
*/
void SearchDepth()              :
{/*@bgen(jjtree) DEPTHSEARCH */
        SimpleNode jjtn000 = new SimpleNode(JJTDEPTHSEARCH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token sp, opar, v1, comma, v2, cpar;
}
{/*@bgen(jjtree) DEPTHSEARCH */
        try {
/*@egen*/
  	sp = < DEPTHSEARCH > {jjtn000.value = sp.image;}/*@bgen(jjtree) OPAR */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTOPAR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
  	opar = < OPAR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/       {jjtn000.value = opar.image;}/*@bgen(jjtree) VARIABLE */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTVARIABLE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
  	v1 = < VARIABLE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/           {jjtn000.value = v1.image;}/*@bgen(jjtree) COMMA */
        {
          SimpleNode jjtn003 = new SimpleNode(JJTCOMMA);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/
  	comma = < COMMA >/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/        {jjtn000.value = comma.image;}/*@bgen(jjtree) VARIABLE */
        {
          SimpleNode jjtn004 = new SimpleNode(JJTVARIABLE);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        }
        try {
/*@egen*/
  	v2 = < VARIABLE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
        }
/*@egen*/           {jjtn000.value = v2.image;}
	(/*@bgen(jjtree) COMMA */
                {
                  SimpleNode jjtn005 = new SimpleNode(JJTCOMMA);
                  boolean jjtc005 = true;
                  jjtree.openNodeScope(jjtn005);
                }
                try {
/*@egen*/
	  	comma = < COMMA >/*@bgen(jjtree)*/
                } finally {
                  if (jjtc005) {
                    jjtree.closeNodeScope(jjtn005, true);
                  }
                }
/*@egen*/        {jjtn000.value = comma.image;}
	  	NodeProperties()
	)?/*@bgen(jjtree) CPAR */
        {
          SimpleNode jjtn006 = new SimpleNode(JJTCPAR);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
        }
        try {
/*@egen*/
   	cpar = < CPAR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
          }
        }
/*@egen*/      /*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {jjtn000.value = cpar.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== BREADTHSEARCH ==
*/
void SearchBreadth()                :
{/*@bgen(jjtree) BREADTHSEARCH */
        SimpleNode jjtn000 = new SimpleNode(JJTBREADTHSEARCH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token sp, opar, v1, comma, v2, cpar;
}
{/*@bgen(jjtree) BREADTHSEARCH */
        try {
/*@egen*/
  	sp = < BREADTHSEARCH > {jjtn000.value = sp.image;}/*@bgen(jjtree) OPAR */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTOPAR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
  	opar = < OPAR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/       {jjtn000.value = opar.image;}/*@bgen(jjtree) VARIABLE */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTVARIABLE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
  	v1 = < VARIABLE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/           {jjtn000.value = v1.image;}/*@bgen(jjtree) COMMA */
        {
          SimpleNode jjtn003 = new SimpleNode(JJTCOMMA);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/
  	comma = < COMMA >/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/        {jjtn000.value = comma.image;}/*@bgen(jjtree) VARIABLE */
        {
          SimpleNode jjtn004 = new SimpleNode(JJTVARIABLE);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        }
        try {
/*@egen*/
  	v2 = < VARIABLE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
        }
/*@egen*/           {jjtn000.value = v2.image;}
	(/*@bgen(jjtree) COMMA */
                {
                  SimpleNode jjtn005 = new SimpleNode(JJTCOMMA);
                  boolean jjtc005 = true;
                  jjtree.openNodeScope(jjtn005);
                }
                try {
/*@egen*/
		comma = < COMMA >/*@bgen(jjtree)*/
                } finally {
                  if (jjtc005) {
                    jjtree.closeNodeScope(jjtn005, true);
                  }
                }
/*@egen*/        {jjtn000.value = comma.image;}
	  	NodeProperties()
	)?/*@bgen(jjtree) CPAR */
        {
          SimpleNode jjtn006 = new SimpleNode(JJTCPAR);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
        }
        try {
/*@egen*/
  	cpar = < CPAR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
          }
        }
/*@egen*/      /*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {jjtn000.value = cpar.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
 	== FILTER NODE PARAMETER PROPERTIES ==
*/
void NodeProperties() :
{/*@bgen(jjtree) NodeProperties */
        SimpleNode jjtn000 = new SimpleNode(JJTNODEPROPERTIES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token comma, osqbr, csqbr, key;
}
{/*@bgen(jjtree) NodeProperties */
        try {
/*@egen*//*@bgen(jjtree) OSQBR */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTOSQBR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
  	osqbr = < OSQBR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/        {jjtn000.value = osqbr.image;}/*@bgen(jjtree) VARIABLE */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTVARIABLE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
  	key = < VARIABLE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/           {jjtn000.value = key.image;}
  	CompareValues()
  	(/*@bgen(jjtree) COMMA */
        {
          SimpleNode jjtn003 = new SimpleNode(JJTCOMMA);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/
    	comma = < COMMA >/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/        {jjtn000.value = comma.image;}/*@bgen(jjtree) VARIABLE */
        {
          SimpleNode jjtn004 = new SimpleNode(JJTVARIABLE);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        }
        try {
/*@egen*/
    	key = < VARIABLE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
        }
/*@egen*/           {jjtn000.value = key.image;}
    	CompareValues()
  	)*/*@bgen(jjtree) CSQBR */
        {
          SimpleNode jjtn005 = new SimpleNode(JJTCSQBR);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
        }
        try {
/*@egen*/
  	csqbr = < CSQBR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
        }
/*@egen*/       /*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/ {jjtn000.value = csqbr.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== DEFINE WAYS TO COMPARE VARIABLE WITH VALUES ==
*/
void CompareValues() :
{/*@bgen(jjtree) CompareValues */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPAREVALUES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token eq, os, s, i, f, cs, comma, comp;
}
{/*@bgen(jjtree) CompareValues */
        try {
/*@egen*//*@bgen(jjtree) EQ */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTEQ);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
  	// Equals to an Interval
  	eq = < EQ >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/     {jjtn000.value = eq.image;}
  	(/*@bgen(jjtree) OSQBR */
                {
                  SimpleNode jjtn002 = new SimpleNode(JJTOSQBR);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/
  	  	os = < OSQBR >/*@bgen(jjtree)*/
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
                }
/*@egen*/        {jjtn000.value = os.image;}
  	|/*@bgen(jjtree) CSQBR */
                {
                  SimpleNode jjtn003 = new SimpleNode(JJTCSQBR);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                }
                try {
/*@egen*/
  		cs = < CSQBR >/*@bgen(jjtree)*/
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003, true);
                  }
                }
/*@egen*/        {jjtn000.value = cs.image;})
  	(/*@bgen(jjtree) STRING */
                {
                  SimpleNode jjtn004 = new SimpleNode(JJTSTRING);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
                }
                try {
/*@egen*/
  	  	s = < STRING >/*@bgen(jjtree)*/
                } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004, true);
                  }
                }
/*@egen*/         {jjtn000.value = s.image;}
  	|/*@bgen(jjtree) INTEGER */
                {
                  SimpleNode jjtn005 = new SimpleNode(JJTINTEGER);
                  boolean jjtc005 = true;
                  jjtree.openNodeScope(jjtn005);
                }
                try {
/*@egen*/
  	  	i = < INTEGER >/*@bgen(jjtree)*/
                } finally {
                  if (jjtc005) {
                    jjtree.closeNodeScope(jjtn005, true);
                  }
                }
/*@egen*/          {jjtn000.value = i.image;}
  	|/*@bgen(jjtree) FLOAT */
                {
                  SimpleNode jjtn006 = new SimpleNode(JJTFLOAT);
                  boolean jjtc006 = true;
                  jjtree.openNodeScope(jjtn006);
                }
                try {
/*@egen*/
  	  	f = < FLOAT >/*@bgen(jjtree)*/
                } finally {
                  if (jjtc006) {
                    jjtree.closeNodeScope(jjtn006, true);
                  }
                }
/*@egen*/        {jjtn000.value = f.image;}
  	)/*@bgen(jjtree) COMMA */
        {
          SimpleNode jjtn007 = new SimpleNode(JJTCOMMA);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
        }
        try {
/*@egen*/
  	comma = < COMMA >/*@bgen(jjtree)*/
        } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
          }
        }
/*@egen*/        {jjtn000.value = comma.image;}
  	Value()
  	(/*@bgen(jjtree) OSQBR */
                {
                  SimpleNode jjtn008 = new SimpleNode(JJTOSQBR);
                  boolean jjtc008 = true;
                  jjtree.openNodeScope(jjtn008);
                }
                try {
/*@egen*/
  	  	os = < OSQBR >/*@bgen(jjtree)*/
                } finally {
                  if (jjtc008) {
                    jjtree.closeNodeScope(jjtn008, true);
                  }
                }
/*@egen*/       /*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ {jjtn000.value = os.image;}
  	|/*@bgen(jjtree) CSQBR */
                {
                  SimpleNode jjtn009 = new SimpleNode(JJTCSQBR);
                  boolean jjtc009 = true;
                  jjtree.openNodeScope(jjtn009);
                }
                try {
/*@egen*/
  		cs = < CSQBR >/*@bgen(jjtree)*/
                } finally {
                  if (jjtc009) {
                    jjtree.closeNodeScope(jjtn009, true);
                  }
                }
/*@egen*/       /*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ {jjtn000.value = cs.image;}
  	)
|/*@bgen(jjtree) COMP */
        {
          SimpleNode jjtn010 = new SimpleNode(JJTCOMP);
          boolean jjtc010 = true;
          jjtree.openNodeScope(jjtn010);
        }
        try {
/*@egen*/
	// Compares to a Value
	comp = < COMP >/*@bgen(jjtree)*/
        } finally {
          if (jjtc010) {
            jjtree.closeNodeScope(jjtn010, true);
          }
        }
/*@egen*/       {jjtn000.value = comp.image;}
	(/*@bgen(jjtree) STRING */
                {
                  SimpleNode jjtn011 = new SimpleNode(JJTSTRING);
                  boolean jjtc011 = true;
                  jjtree.openNodeScope(jjtn011);
                }
                try {
/*@egen*/
  	  	s = < STRING >/*@bgen(jjtree)*/
                } finally {
                  if (jjtc011) {
                    jjtree.closeNodeScope(jjtn011, true);
                  }
                }
/*@egen*/        /*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                       }
/*@egen*/ {jjtn000.value = s.image;}
  	|/*@bgen(jjtree) INTEGER */
                {
                  SimpleNode jjtn012 = new SimpleNode(JJTINTEGER);
                  boolean jjtc012 = true;
                  jjtree.openNodeScope(jjtn012);
                }
                try {
/*@egen*/
  	  	i = < INTEGER >/*@bgen(jjtree)*/
                } finally {
                  if (jjtc012) {
                    jjtree.closeNodeScope(jjtn012, true);
                  }
                }
/*@egen*/         /*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                         }
/*@egen*/ {jjtn000.value = i.image;}
  	|/*@bgen(jjtree) FLOAT */
                {
                  SimpleNode jjtn013 = new SimpleNode(JJTFLOAT);
                  boolean jjtc013 = true;
                  jjtree.openNodeScope(jjtn013);
                }
                try {
/*@egen*/
  	  	f = < FLOAT >/*@bgen(jjtree)*/
                } finally {
                  if (jjtc013) {
                    jjtree.closeNodeScope(jjtn013, true);
                  }
                }
/*@egen*/       /*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ {jjtn000.value = f.image;}
  	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
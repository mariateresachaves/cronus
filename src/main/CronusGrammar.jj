/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CronusGrammar.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  	             
	STATIC = true;
	LOOKAHEAD = 1;
}

PARSER_BEGIN(CronusGrammar)
package main;

import java.util.Map;
import java.util.HashMap;

public class CronusGrammar/*@bgen(jjtree)*/implements CronusGrammarTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTCronusGrammarState jjtree = new JJTCronusGrammarState();

/*@egen*/
	public static void main(String args []) throws ParseException, TokenMgrError
	{
		CronusGrammar parser = new CronusGrammar(System.in);
		
		try {
		    parser.Start();
		    System.out.println("Succesful parse");
		    
		    ASTStart root = (ASTStart)parser.jjtree.rootNode();
		    // root.dump(args[0]); // print the structure of the AST
		    
		    Map<String,Integer> store = new HashMap<String,Integer>();
		    store = root.execStart(store); // execute the interpreter
		    // root.printStore("Final store" , store);

			//System.out.println("AST:");
		    //root.dump("");
		}
		catch (ParseException e) {
			    System.out.println("Parse error: " + e);
			    return;
		}
		catch (TokenMgrError e) {
			    System.out.println("Token error: " + e);
			    return;
		}
	}

}

PARSER_END(CronusGrammar)

SKIP :
{
  	" "
|  "\n"
| 	"\r"
| 	"\r\n"
}

TOKEN : /* --- LITERALS --- */
{
	< #DIGIT   : ["0"-"9"] >
| 	< #LOWER   : ["a"-"z"] >
| 	< #UPPER   : ["A"-"Z"] >
}

TOKEN : /* --- RESERVED WORDS --- */
{
  	< NEW           : "new">
| 	< BOOL          : "true" | "false" >
|   < LABEL         : "label" >
|   < DEGREE        : "degree" >
|   < WEIGHT        : "weight" >
|   < SHORTESTPATH  : "shortestPath" >
|   < DEPTHSEARCH   : "depthSearch" >
|   < BREADTHSEARCH : "breadthSearch" >
|   < IN            : "in" >
|   < OUT           : "out" >
|   < EDGES         : "edges" >
|   < EDGEF         : "edge" >
|   < NODES         : "nodes" >
|   < NODEF         : "node" >
}

TOKEN : /* --- CLASSES --- */
{
  	< GRAPH    : "Graph" >
| 	< NODE     : "Node" >
| 	< EDGE     : "Edge" >
| 	< VARIABLE : ("_" | < LOWER > | < UPPER > )+ ("_" | < LOWER > | < UPPER > | < DIGIT > )* >
|   < STRING   : "\"" (~["\"", "\\"] | "\\\"" | "\\\\")* "\"" >
| 	< INTEGER  : ("+" | "-")? (< DIGIT >)+ >
| 	< FLOAT    : ("+" | "-")? ((< DIGIT >)*".")?(< DIGIT >)+ >
}

TOKEN : /*--- OPERATORS --- */
{
   	< OPAR    : "(" > 
| 	< CPAR    : ")" >
| 	< OBR     : "{" >
| 	< CBR     : "}" >
| 	< OSQBR   : "[" >
| 	< CSQBR   : "]" >
| 	< COL     : ":" >
| 	< SCOL    : ";" >
| 	< COMMA   : "," >
| 	< EQ      : "=" >
| 	< DOT     : "." >
| 	< QUOTE   : "\"" | "'" >
| 	< COMP    : ">" | "<" | "<=" | ">=" | "==" >
}

TOKEN : /* --- FUNCTIONS --- */
{
  	< PATH : ("\"" | "'") ( ( (< LOWER > | < UPPER >) ":")? ("\\"(< LOWER > | < UPPER > | < DIGIT > | "_" | "." | "-")+ )+("\\")?
    	   | ("/")?((< LOWER > | < UPPER > | < DIGIT > | "_" | "." | "-")+"/")+("/")? )
        	("\"" | "'") >
}

/*
	== START FUNCTION ==
*/
SimpleNode Start() :
{/*@bgen(jjtree) Start */
        ASTStart jjtn000 = new ASTStart(JJTSTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token scol;
}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
 	(
 	    LOOKAHEAD(3)
    	Declaration() 
	|
		LOOKAHEAD(2)
    	NewGraph()
	|
		LOOKAHEAD(2)
   		ListNodes()
	|
   		SearchGraph()
  	)+
  	< EOF >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
  	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== DECLARATION OF VARIABLES ==
*/
void Declaration() :
{/*@bgen(jjtree) Declaration */
        ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token g, e, n, osqbr, csqbr, v, scol;
}
{/*@bgen(jjtree) Declaration */
        try {
/*@egen*/
  	(
  	  	g = < GRAPH >/*@bgen(jjtree) Graph */
                              {
                                ASTGraph jjtn001 = new ASTGraph(JJTGRAPH);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtc001 = false;
                              }
/*@egen*/ {jjtn001.val = g.image;}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
                              }
/*@egen*/ 			      
	|
	  	e = < EDGE >/*@bgen(jjtree) Edge */
                             {
                               ASTEdge jjtn002 = new ASTEdge(JJTEDGE);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn002, true);
                               jjtc002 = false;
                             }
/*@egen*/ {jjtn002.val = e.image;}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002, true);
                               }
                             }
/*@egen*/ 			     
	|
		LOOKAHEAD(2)	  	n = < NODE >/*@bgen(jjtree) Node */
                             {
                               ASTNode jjtn003 = new ASTNode(JJTNODE);
                               boolean jjtc003 = true;
                               jjtree.openNodeScope(jjtn003);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn003, true);
                               jjtc003 = false;
                             }
/*@egen*/ {jjtn003.val = n.image;}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc003) {
                                 jjtree.closeNodeScope(jjtn003, true);
                               }
                             }
/*@egen*/ 			     
	|
		n     = < NODE >/*@bgen(jjtree) Node */
                                 {
                                   ASTNode jjtn004 = new ASTNode(JJTNODE);
                                   boolean jjtc004 = true;
                                   jjtree.openNodeScope(jjtn004);
                                 }
                                 try {
/*@egen*//*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn004, true);
                                   jjtc004 = false;
                                 }
/*@egen*/ {jjtn004.val = n.image;}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc004) {
                                     jjtree.closeNodeScope(jjtn004, true);
                                   }
                                 }
/*@egen*/ 		     
		osqbr = < OSQBR >/*@bgen(jjtree) OpenSquareBracket */
                                  {
                                    ASTOpenSquareBracket jjtn005 = new ASTOpenSquareBracket(JJTOPENSQUAREBRACKET);
                                    boolean jjtc005 = true;
                                    jjtree.openNodeScope(jjtn005);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn005, true);
                                    jjtc005 = false;
                                  }
/*@egen*/ {jjtn005.val = osqbr.image;}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc005) {
                                      jjtree.closeNodeScope(jjtn005, true);
                                    }
                                  }
/*@egen*/ 	                  
		csqbr = < CSQBR >/*@bgen(jjtree) CloseSquareBracket */
                                  {
                                    ASTCloseSquareBracket jjtn006 = new ASTCloseSquareBracket(JJTCLOSESQUAREBRACKET);
                                    boolean jjtc006 = true;
                                    jjtree.openNodeScope(jjtn006);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn006, true);
                                    jjtc006 = false;
                                  }
/*@egen*/ {jjtn006.val = csqbr.image;}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc006) {
                                      jjtree.closeNodeScope(jjtn006, true);
                                    }
                                  }
/*@egen*/ 	                   	)
	v    = < VARIABLE >/*@bgen(jjtree) Variable */
                            {
                              ASTVariable jjtn007 = new ASTVariable(JJTVARIABLE);
                              boolean jjtc007 = true;
                              jjtree.openNodeScope(jjtn007);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn007, true);
                              jjtc007 = false;
                            }
/*@egen*/ {jjtn007.val = v.image;}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc007) {
                                jjtree.closeNodeScope(jjtn007, true);
                              }
                            }
/*@egen*/ 		         
  	scol = < SCOL >/*@bgen(jjtree) Semicolon */
                        {
                          ASTSemicolon jjtn008 = new ASTSemicolon(JJTSEMICOLON);
                          boolean jjtc008 = true;
                          jjtree.openNodeScope(jjtn008);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn008, true);
                          jjtc008 = false;
                        }
/*@egen*/ {jjtn008.val = scol.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc008) {
                            jjtree.closeNodeScope(jjtn008, true);
                          }
                        }
/*@egen*/ 		          /*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== NEW GRAPH ==
*/
void NewGraph() :
{/*@bgen(jjtree) NewGraph */
        ASTNewGraph jjtn000 = new ASTNewGraph(JJTNEWGRAPH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token g, e, n, osqbr, csqbr, v, eq, scol;
}
{/*@bgen(jjtree) NewGraph */
        try {
/*@egen*/
  	(
		(
	  	  	g = < GRAPH >/*@bgen(jjtree) Graph */
                                      {
                                        ASTGraph jjtn001 = new ASTGraph(JJTGRAPH);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
                                      }
                                      try {
/*@egen*//*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn001, true);
                                        jjtc001 = false;
                                      }
/*@egen*/ {jjtn001.val = g.image;}/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001, true);
                                        }
                                      }
/*@egen*/ 			      
		|
		  	e = < EDGE >/*@bgen(jjtree) Edge */
                                     {
                                       ASTEdge jjtn002 = new ASTEdge(JJTEDGE);
                                       boolean jjtc002 = true;
                                       jjtree.openNodeScope(jjtn002);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn002, true);
                                       jjtc002 = false;
                                     }
/*@egen*/ {jjtn002.val = e.image;}/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc002) {
                                         jjtree.closeNodeScope(jjtn002, true);
                                       }
                                     }
/*@egen*/ 			     
		|
			LOOKAHEAD(2)
		  	n = < NODE >/*@bgen(jjtree) Node */
                                     {
                                       ASTNode jjtn003 = new ASTNode(JJTNODE);
                                       boolean jjtc003 = true;
                                       jjtree.openNodeScope(jjtn003);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn003, true);
                                       jjtc003 = false;
                                     }
/*@egen*/ {jjtn003.val = n.image;}/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc003) {
                                         jjtree.closeNodeScope(jjtn003, true);
                                       }
                                     }
/*@egen*/ 			     
		|
			n 	  = < NODE >/*@bgen(jjtree) Node */
                                             {
                                               ASTNode jjtn004 = new ASTNode(JJTNODE);
                                               boolean jjtc004 = true;
                                               jjtree.openNodeScope(jjtn004);
                                             }
                                             try {
/*@egen*//*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn004, true);
                                               jjtc004 = false;
                                             }
/*@egen*/ {jjtn004.val = n.image;}/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc004) {
                                                 jjtree.closeNodeScope(jjtn004, true);
                                               }
                                             }
/*@egen*/ 		     
			osqbr = < OSQBR >/*@bgen(jjtree) OpenSquareBracket */
                                          {
                                            ASTOpenSquareBracket jjtn005 = new ASTOpenSquareBracket(JJTOPENSQUAREBRACKET);
                                            boolean jjtc005 = true;
                                            jjtree.openNodeScope(jjtn005);
                                          }
                                          try {
/*@egen*//*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn005, true);
                                            jjtc005 = false;
                                          }
/*@egen*/ {jjtn005.val = osqbr.image;}/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc005) {
                                              jjtree.closeNodeScope(jjtn005, true);
                                            }
                                          }
/*@egen*/ 	                  
			csqbr = < CSQBR >/*@bgen(jjtree) CloseSquareBracket */
                                          {
                                            ASTCloseSquareBracket jjtn006 = new ASTCloseSquareBracket(JJTCLOSESQUAREBRACKET);
                                            boolean jjtc006 = true;
                                            jjtree.openNodeScope(jjtn006);
                                          }
                                          try {
/*@egen*//*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn006, true);
                                            jjtc006 = false;
                                          }
/*@egen*/ {jjtn006.val = csqbr.image;}/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc006) {
                                              jjtree.closeNodeScope(jjtn006, true);
                                            }
                                          }
/*@egen*/ 	                   
		)?
		v = < VARIABLE >/*@bgen(jjtree) Variable */
                                 {
                                   ASTVariable jjtn007 = new ASTVariable(JJTVARIABLE);
                                   boolean jjtc007 = true;
                                   jjtree.openNodeScope(jjtn007);
                                 }
                                 try {
/*@egen*//*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn007, true);
                                   jjtc007 = false;
                                 }
/*@egen*/ {jjtn007.val = v.image;}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc007) {
                                     jjtree.closeNodeScope(jjtn007, true);
                                   }
                                 }
/*@egen*/ 			         
  	)
	eq   = < EQ >/*@bgen(jjtree) Equal */
                      {
                        ASTEqual jjtn008 = new ASTEqual(JJTEQUAL);
                        boolean jjtc008 = true;
                        jjtree.openNodeScope(jjtn008);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn008, true);
                        jjtc008 = false;
                      }
/*@egen*/ {jjtn008.val = eq.image;}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc008) {
                          jjtree.closeNodeScope(jjtn008, true);
                        }
                      }
/*@egen*/ 				      
	NewGraphRight()
  	scol = < SCOL >/*@bgen(jjtree) Semicolon */
                        {
                          ASTSemicolon jjtn009 = new ASTSemicolon(JJTSEMICOLON);
                          boolean jjtc009 = true;
                          jjtree.openNodeScope(jjtn009);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn009, true);
                          jjtc009 = false;
                        }
/*@egen*/ {jjtn009.val = scol.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc009) {
                            jjtree.closeNodeScope(jjtn009, true);
                          }
                        }
/*@egen*/ 			          /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== RIGHT HAND SIDE OF A NEW GRAPH ==
*/
void NewGraphRight() :
{/*@bgen(jjtree) NewGraphRight */
        ASTNewGraphRight jjtn000 = new ASTNewGraphRight(JJTNEWGRAPHRIGHT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token n, g, p, opar, cpar;
}
{/*@bgen(jjtree) NewGraphRight */
        try {
/*@egen*/
  	n    = < NEW >/*@bgen(jjtree) New */
                       {
                         ASTNew jjtn001 = new ASTNew(JJTNEW);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                       }
/*@egen*/ {jjtn001.val = n.image;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
                       }
/*@egen*/ 	    
  	g    = < GRAPH >/*@bgen(jjtree) Graph */
                         {
                           ASTGraph jjtn002 = new ASTGraph(JJTGRAPH);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtc002 = false;
                         }
/*@egen*/ {jjtn002.val = g.image;}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
                           }
                         }
/*@egen*/	      
  	opar = < OPAR >/*@bgen(jjtree) OpenParenthesis */
                        {
                          ASTOpenParenthesis jjtn003 = new ASTOpenParenthesis(JJTOPENPARENTHESIS);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn003, true);
                          jjtc003 = false;
                        }
/*@egen*/ {jjtn003.val = opar.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                          }
                        }
/*@egen*/                 
  	p    = < PATH >/*@bgen(jjtree) Path */
                        {
                          ASTPath jjtn004 = new ASTPath(JJTPATH);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn004, true);
                          jjtc004 = false;
                        }
/*@egen*/ {jjtn004.val = p.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004, true);
                          }
                        }
/*@egen*/ 	     
  	cpar = < CPAR >/*@bgen(jjtree) CloseParenthesis */
                        {
                          ASTCloseParenthesis jjtn005 = new ASTCloseParenthesis(JJTCLOSEPARENTHESIS);
                          boolean jjtc005 = true;
                          jjtree.openNodeScope(jjtn005);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn005, true);
                          jjtc005 = false;
                        }
/*@egen*/ {jjtn005.val = cpar.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc005) {
                            jjtree.closeNodeScope(jjtn005, true);
                          }
                        }
/*@egen*/                  /*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== LIST ALL NODES ACCORDING TWO PARAMETERS (IF ANY) ==
*/
void ListNodes() :
{/*@bgen(jjtree) ListNodes */
        ASTListNodes jjtn000 = new ASTListNodes(JJTLISTNODES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token eq, scol, v;
}
{/*@bgen(jjtree) ListNodes */
        try {
/*@egen*/
  	NodeListDec()
  	(
    	eq = < EQ >/*@bgen(jjtree) Equal */
                    {
                      ASTEqual jjtn001 = new ASTEqual(JJTEQUAL);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                    }
/*@egen*/ {jjtn001.val = eq.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                      }
                    }
/*@egen*/ 	      
    	ListNodesRight()
  	)?
  	scol = < SCOL >/*@bgen(jjtree) Semicolon */
                        {
                          ASTSemicolon jjtn002 = new ASTSemicolon(JJTSEMICOLON);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                        }
/*@egen*/ {jjtn002.val = scol.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
                        }
/*@egen*/           
|
	v = < VARIABLE >/*@bgen(jjtree) Variable */
                         {
                           ASTVariable jjtn003 = new ASTVariable(JJTVARIABLE);
                           boolean jjtc003 = true;
                           jjtree.openNodeScope(jjtn003);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn003, true);
                           jjtc003 = false;
                         }
/*@egen*/ {jjtn003.val = v.image;}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc003) {
                             jjtree.closeNodeScope(jjtn003, true);
                           }
                         }
/*@egen*/ 	         
  	eq = < EQ >/*@bgen(jjtree) Equal */
                    {
                      ASTEqual jjtn004 = new ASTEqual(JJTEQUAL);
                      boolean jjtc004 = true;
                      jjtree.openNodeScope(jjtn004);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn004, true);
                      jjtc004 = false;
                    }
/*@egen*/ {jjtn004.val = eq.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc004) {
                        jjtree.closeNodeScope(jjtn004, true);
                      }
                    }
/*@egen*/ 		      
  	ListNodesRight()
  	scol = < SCOL >/*@bgen(jjtree) Semicolon */
                        {
                          ASTSemicolon jjtn005 = new ASTSemicolon(JJTSEMICOLON);
                          boolean jjtc005 = true;
                          jjtree.openNodeScope(jjtn005);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn005, true);
                          jjtc005 = false;
                        }
/*@egen*/ {jjtn005.val = scol.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc005) {
                            jjtree.closeNodeScope(jjtn005, true);
                          }
                        }
/*@egen*/           /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== NODE LIST DECLARATION ==
*/
void NodeListDec() :
{/*@bgen(jjtree) NodeListDec */
        ASTNodeListDec jjtn000 = new ASTNodeListDec(JJTNODELISTDEC);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token n, obr, cbr, v;
}
{/*@bgen(jjtree) NodeListDec */
        try {
/*@egen*/
  	n = < NODE >/*@bgen(jjtree) Node */
                     {
                       ASTNode jjtn001 = new ASTNode(JJTNODE);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn001, true);
                       jjtc001 = false;
                     }
/*@egen*/ {jjtn001.val = n.image;}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                       }
                     }
/*@egen*/ 		     
  	obr = < OSQBR >/*@bgen(jjtree) OpenSquareBracket */
                        {
                          ASTOpenSquareBracket jjtn002 = new ASTOpenSquareBracket(JJTOPENSQUAREBRACKET);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                        }
/*@egen*/ {jjtn002.val = obr.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
                        }
/*@egen*/ 	                  
  	cbr = < CSQBR >/*@bgen(jjtree) CloseSquareBracket */
                        {
                          ASTCloseSquareBracket jjtn003 = new ASTCloseSquareBracket(JJTCLOSESQUAREBRACKET);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn003, true);
                          jjtc003 = false;
                        }
/*@egen*/ {jjtn003.val = cbr.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                          }
                        }
/*@egen*/ 	                   
  	v = < VARIABLE >/*@bgen(jjtree) Variable */
                         {
                           ASTVariable jjtn004 = new ASTVariable(JJTVARIABLE);
                           boolean jjtc004 = true;
                           jjtree.openNodeScope(jjtn004);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn004, true);
                           jjtc004 = false;
                         }
/*@egen*/ {jjtn004.val = v.image;}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc004) {
                             jjtree.closeNodeScope(jjtn004, true);
                           }
                         }
/*@egen*/ 	         /*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== RIGHT SIDE OF DECLARATION TO GET LIST OF NODES ==
*/
void ListNodesRight() :
{/*@bgen(jjtree) ListNodesRight */
        ASTListNodesRight jjtn000 = new ASTListNodesRight(JJTLISTNODESRIGHT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token v, d, n, o, c;
}
{/*@bgen(jjtree) ListNodesRight */
        try {
/*@egen*/
  	v = < VARIABLE >/*@bgen(jjtree) Variable */
                         {
                           ASTVariable jjtn001 = new ASTVariable(JJTVARIABLE);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn001, true);
                           jjtc001 = false;
                         }
/*@egen*/ {jjtn001.val = v.image;}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                           }
                         }
/*@egen*/ 	         
  	d = < DOT >/*@bgen(jjtree) Dot */
                    {
                      ASTDot jjtn002 = new ASTDot(JJTDOT);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtc002 = false;
                    }
/*@egen*/ {jjtn002.val = d.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
                    }
/*@egen*/		    
  	n = < NODES >/*@bgen(jjtree) Nodes */
                      {
                        ASTNodes jjtn003 = new ASTNodes(JJTNODES);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                      }
/*@egen*/ {jjtn003.val = n.image;}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003, true);
                        }
                      }
/*@egen*/		      
  	o = < OPAR >/*@bgen(jjtree) OpenParenthesis */
                     {
                       ASTOpenParenthesis jjtn004 = new ASTOpenParenthesis(JJTOPENPARENTHESIS);
                       boolean jjtc004 = true;
                       jjtree.openNodeScope(jjtn004);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn004, true);
                       jjtc004 = false;
                     }
/*@egen*/ {jjtn004.val = o.image;}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc004) {
                         jjtree.closeNodeScope(jjtn004, true);
                       }
                     }
/*@egen*/		                
  	AllParametersNode()
  	c = < CPAR >/*@bgen(jjtree) CloseParenthesis */
                     {
                       ASTCloseParenthesis jjtn005 = new ASTCloseParenthesis(JJTCLOSEPARENTHESIS);
                       boolean jjtc005 = true;
                       jjtree.openNodeScope(jjtn005);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn005, true);
                       jjtc005 = false;
                     }
/*@egen*/ {jjtn005.val = c.image;}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc005) {
                         jjtree.closeNodeScope(jjtn005, true);
                       }
                     }
/*@egen*/		                 /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== FILTER SEARCH NODE WITH ALL THREE PARAMETERS ==
*/
void AllParametersNode() :
{/*@bgen(jjtree) AllParametersNode */
        ASTAllParametersNode jjtn000 = new ASTAllParametersNode(JJTALLPARAMETERSNODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token comma;
}
{/*@bgen(jjtree) AllParametersNode */
        try {
/*@egen*/
	(
	  	LOOKAHEAD(2)		NodeLabel()
	  	(
	    	comma = < COMMA >/*@bgen(jjtree) Comma */
                                  {
                                    ASTComma jjtn001 = new ASTComma(JJTCOMMA);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtc001 = false;
                                  }
/*@egen*/ {jjtn001.val = comma.image;}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                    }
                                  }
/*@egen*/ 		      
	    	NodeDegree()
		    (
		      comma = < COMMA >/*@bgen(jjtree) Comma */
                                        {
                                          ASTComma jjtn002 = new ASTComma(JJTCOMMA);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn002, true);
                                          jjtc002 = false;
                                        }
/*@egen*/ {jjtn002.val = comma.image;}/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002, true);
                                          }
                                        }
/*@egen*/ 	      
		      NodeProperties()
		    )?
	    )?
	|
		NodeLabel()
	  	(
		    
		    comma = < COMMA >/*@bgen(jjtree) Comma */
                                      {
                                        ASTComma jjtn003 = new ASTComma(JJTCOMMA);
                                        boolean jjtc003 = true;
                                        jjtree.openNodeScope(jjtn003);
                                      }
                                      try {
/*@egen*//*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn003, true);
                                        jjtc003 = false;
                                      }
/*@egen*/ {jjtn003.val = comma.image;}/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc003) {
                                          jjtree.closeNodeScope(jjtn003, true);
                                        }
                                      }
/*@egen*/ 		      
	    	NodeProperties()
		    (
		      comma = < COMMA >/*@bgen(jjtree) Comma */
                                        {
                                          ASTComma jjtn004 = new ASTComma(JJTCOMMA);
                                          boolean jjtc004 = true;
                                          jjtree.openNodeScope(jjtn004);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn004, true);
                                          jjtc004 = false;
                                        }
/*@egen*/ {jjtn004.val = comma.image;}/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc004) {
                                            jjtree.closeNodeScope(jjtn004, true);
                                          }
                                        }
/*@egen*/	      
		      NodeDegree()
		    )?
	    )?
	|
		LOOKAHEAD(2)
		NodeDegree()
	  	(
	    	comma = < COMMA >/*@bgen(jjtree) Comma */
                                  {
                                    ASTComma jjtn005 = new ASTComma(JJTCOMMA);
                                    boolean jjtc005 = true;
                                    jjtree.openNodeScope(jjtn005);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn005, true);
                                    jjtc005 = false;
                                  }
/*@egen*/ {jjtn005.val = comma.image;}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc005) {
                                      jjtree.closeNodeScope(jjtn005, true);
                                    }
                                  }
/*@egen*/		      
	    	NodeLabel()
		    (
		      comma = < COMMA >/*@bgen(jjtree) Comma */
                                        {
                                          ASTComma jjtn006 = new ASTComma(JJTCOMMA);
                                          boolean jjtc006 = true;
                                          jjtree.openNodeScope(jjtn006);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn006, true);
                                          jjtc006 = false;
                                        }
/*@egen*/ {jjtn006.val = comma.image;}/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc006) {
                                            jjtree.closeNodeScope(jjtn006, true);
                                          }
                                        }
/*@egen*/	      
		      NodeProperties()
		    )?
	    )?
	|
		NodeDegree()
	  	(
	    	comma = < COMMA >/*@bgen(jjtree) Comma */
                                  {
                                    ASTComma jjtn007 = new ASTComma(JJTCOMMA);
                                    boolean jjtc007 = true;
                                    jjtree.openNodeScope(jjtn007);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn007, true);
                                    jjtc007 = false;
                                  }
/*@egen*/ {jjtn007.val = comma.image;}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc007) {
                                      jjtree.closeNodeScope(jjtn007, true);
                                    }
                                  }
/*@egen*/		      
	    	NodeProperties()
		    (
		      comma = < COMMA >/*@bgen(jjtree) Comma */
                                        {
                                          ASTComma jjtn008 = new ASTComma(JJTCOMMA);
                                          boolean jjtc008 = true;
                                          jjtree.openNodeScope(jjtn008);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn008, true);
                                          jjtc008 = false;
                                        }
/*@egen*/ {jjtn008.val = comma.image;}/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc008) {
                                            jjtree.closeNodeScope(jjtn008, true);
                                          }
                                        }
/*@egen*/	      
		      NodeLabel()
		    )?
	    )?
	|
		LOOKAHEAD(2)
		NodeProperties()
	  	(
	    	comma = < COMMA >/*@bgen(jjtree) Comma */
                                  {
                                    ASTComma jjtn009 = new ASTComma(JJTCOMMA);
                                    boolean jjtc009 = true;
                                    jjtree.openNodeScope(jjtn009);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn009, true);
                                    jjtc009 = false;
                                  }
/*@egen*/ {jjtn009.val = comma.image;}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc009) {
                                      jjtree.closeNodeScope(jjtn009, true);
                                    }
                                  }
/*@egen*/		      
	    	NodeLabel()
		    (
		      comma = < COMMA >/*@bgen(jjtree) Comma */
                                        {
                                          ASTComma jjtn010 = new ASTComma(JJTCOMMA);
                                          boolean jjtc010 = true;
                                          jjtree.openNodeScope(jjtn010);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn010, true);
                                          jjtc010 = false;
                                        }
/*@egen*/ {jjtn010.val = comma.image;}/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc010) {
                                            jjtree.closeNodeScope(jjtn010, true);
                                          }
                                        }
/*@egen*/	      
		      NodeDegree()
		    )?
	    )?
	|
		NodeProperties()
	  	(
			comma = < COMMA >/*@bgen(jjtree) Comma */
                                          {
                                            ASTComma jjtn011 = new ASTComma(JJTCOMMA);
                                            boolean jjtc011 = true;
                                            jjtree.openNodeScope(jjtn011);
                                          }
                                          try {
/*@egen*//*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn011, true);
                                            jjtc011 = false;
                                          }
/*@egen*/ {jjtn011.val = comma.image;}/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc011) {
                                              jjtree.closeNodeScope(jjtn011, true);
                                            }
                                          }
/*@egen*/		      
	    	NodeDegree()
		    (
		      comma = < COMMA >/*@bgen(jjtree) Comma */
                                        {
                                          ASTComma jjtn012 = new ASTComma(JJTCOMMA);
                                          boolean jjtc012 = true;
                                          jjtree.openNodeScope(jjtn012);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn012, true);
                                          jjtc012 = false;
                                        }
/*@egen*/ {jjtn012.val = comma.image;}/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc012) {
                                            jjtree.closeNodeScope(jjtn012, true);
                                          }
                                        }
/*@egen*/	      
		      NodeLabel()
		    )?
	    )?
	)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== FILTER NODE PARAMETER LABEL ==
*/
void NodeLabel() :
{/*@bgen(jjtree) NodeLabel */
        ASTNodeLabel jjtn000 = new ASTNodeLabel(JJTNODELABEL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token label, eq;
}
{/*@bgen(jjtree) NodeLabel */
        try {
/*@egen*/
  	label = < LABEL >/*@bgen(jjtree) Label */
                          {
                            ASTLabel jjtn001 = new ASTLabel(JJTLABEL);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtc001 = false;
                          }
/*@egen*/ {jjtn001.val = label.image;}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
                          }
/*@egen*/	      
 	eq = < EQ >/*@bgen(jjtree) Equal */
                    {
                      ASTEqual jjtn002 = new ASTEqual(JJTEQUAL);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtc002 = false;
                    }
/*@egen*/ {jjtn002.val = eq.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
                    }
/*@egen*/			      
 	Value()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== FILTER NODE PARAMETER DEGREE ==
*/
void NodeDegree() :
{/*@bgen(jjtree) NodeDegree */
        ASTNodeDegree jjtn000 = new ASTNodeDegree(JJTNODEDEGREE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token degree;
}
{/*@bgen(jjtree) NodeDegree */
        try {
/*@egen*/
  	degree = < DEGREE >/*@bgen(jjtree) Degree */
                            {
                              ASTDegree jjtn001 = new ASTDegree(JJTDEGREE);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn001, true);
                              jjtc001 = false;
                            }
/*@egen*/ {jjtn001.val = degree.image;}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
                            }
/*@egen*/	       
  	CompareValues()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== TYPES OF VALUES: STRING OR NUMBER ==
*/
void Value() :
{/*@bgen(jjtree) Value */
        ASTValue jjtn000 = new ASTValue(JJTVALUE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token s, i, f;
}
{/*@bgen(jjtree) Value */
        try {
/*@egen*/
  	s = < STRING >/*@bgen(jjtree) String */
                       {
                         ASTString jjtn001 = new ASTString(JJTSTRING);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                       }
/*@egen*/ {jjtn001.val = s.image;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
                       }
/*@egen*/		       
|   i = < INTEGER >/*@bgen(jjtree) Integer */
                    {
                      ASTInteger jjtn002 = new ASTInteger(JJTINTEGER);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtc002 = false;
                    }
/*@egen*/ {jjtn002.val = i.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
                    }
/*@egen*/	        
|   f = < FLOAT >/*@bgen(jjtree) Float */
                  {
                    ASTFloat jjtn003 = new ASTFloat(JJTFLOAT);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                  }
/*@egen*/ {jjtn003.val = f.image;}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                    }
                  }
/*@egen*/		      /*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== SEARCH ==
*/
void SearchGraph() :
{/*@bgen(jjtree) SearchGraph */
        ASTSearchGraph jjtn000 = new ASTSearchGraph(JJTSEARCHGRAPH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token v, d, opar, v1, comma, v2, cpar, scol;
}
{/*@bgen(jjtree) SearchGraph */
        try {
/*@egen*/
 	v = < VARIABLE >/*@bgen(jjtree) Variable */
                         {
                           ASTVariable jjtn001 = new ASTVariable(JJTVARIABLE);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn001, true);
                           jjtc001 = false;
                         }
/*@egen*/ {jjtn001.val = v.image;}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                           }
                         }
/*@egen*/				         
 	d = < DOT >/*@bgen(jjtree) Dot */
                    {
                      ASTDot jjtn002 = new ASTDot(JJTDOT);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtc002 = false;
                    }
/*@egen*/ {jjtn002.val = d.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
                    }
/*@egen*/					    
 	SearchType()
  	opar = < OPAR >/*@bgen(jjtree) OpenParenthesis */
                        {
                          ASTOpenParenthesis jjtn003 = new ASTOpenParenthesis(JJTOPENPARENTHESIS);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn003, true);
                          jjtc003 = false;
                        }
/*@egen*/ {jjtn003.val = opar.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                          }
                        }
/*@egen*/				                
  	v1 = < VARIABLE >/*@bgen(jjtree) Variable */
                          {
                            ASTVariable jjtn004 = new ASTVariable(JJTVARIABLE);
                            boolean jjtc004 = true;
                            jjtree.openNodeScope(jjtn004);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn004, true);
                            jjtc004 = false;
                          }
/*@egen*/ {jjtn004.val = v1.image;}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc004) {
                              jjtree.closeNodeScope(jjtn004, true);
                            }
                          }
/*@egen*/				         
  	comma = < COMMA >/*@bgen(jjtree) Comma */
                          {
                            ASTComma jjtn005 = new ASTComma(JJTCOMMA);
                            boolean jjtc005 = true;
                            jjtree.openNodeScope(jjtn005);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn005, true);
                            jjtc005 = false;
                          }
/*@egen*/ {jjtn005.val = comma.image;}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc005) {
                              jjtree.closeNodeScope(jjtn005, true);
                            }
                          }
/*@egen*/			      
  	v2 = < VARIABLE >/*@bgen(jjtree) Variable */
                          {
                            ASTVariable jjtn006 = new ASTVariable(JJTVARIABLE);
                            boolean jjtc006 = true;
                            jjtree.openNodeScope(jjtn006);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn006, true);
                            jjtc006 = false;
                          }
/*@egen*/ {jjtn006.val = v2.image;}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc006) {
                              jjtree.closeNodeScope(jjtn006, true);
                            }
                          }
/*@egen*/				         
	MoreOptions()
   	cpar = < CPAR >/*@bgen(jjtree) CloseParenthesis */
                        {
                          ASTCloseParenthesis jjtn007 = new ASTCloseParenthesis(JJTCLOSEPARENTHESIS);
                          boolean jjtc007 = true;
                          jjtree.openNodeScope(jjtn007);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn007, true);
                          jjtc007 = false;
                        }
/*@egen*/ {jjtn007.val = cpar.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc007) {
                            jjtree.closeNodeScope(jjtn007, true);
                          }
                        }
/*@egen*/				                 
 	scol = < SCOL >/*@bgen(jjtree) Semicolon */
                        {
                          ASTSemicolon jjtn008 = new ASTSemicolon(JJTSEMICOLON);
                          boolean jjtc008 = true;
                          jjtree.openNodeScope(jjtn008);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn008, true);
                          jjtc008 = false;
                        }
/*@egen*/ {jjtn008.val = scol.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc008) {
                            jjtree.closeNodeScope(jjtn008, true);
                          }
                        }
/*@egen*/				          /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== SEARCH TYPE ==
*/
void SearchType() :
{/*@bgen(jjtree) SearchType */
        ASTSearchType jjtn000 = new ASTSearchType(JJTSEARCHTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token sp;
}
{/*@bgen(jjtree) SearchType */
        try {
/*@egen*/
  	sp = < SHORTESTPATH >/*@bgen(jjtree) ShortestPath */
                              {
                                ASTShortestPath jjtn001 = new ASTShortestPath(JJTSHORTESTPATH);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtc001 = false;
                              }
/*@egen*/ {jjtn001.val = sp.image;}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
                              }
/*@egen*/		             
|
 	sp = < DEPTHSEARCH >/*@bgen(jjtree) DepthSearch */
                             {
                               ASTDepthSearch jjtn002 = new ASTDepthSearch(JJTDEPTHSEARCH);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn002, true);
                               jjtc002 = false;
                             }
/*@egen*/ {jjtn002.val = sp.image;}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002, true);
                               }
                             }
/*@egen*/		            
|
	sp = < BREADTHSEARCH >/*@bgen(jjtree) BreadthSearch */
                               {
                                 ASTBreadthSearch jjtn003 = new ASTBreadthSearch(JJTBREADTHSEARCH);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
                               }
                               try {
/*@egen*//*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn003, true);
                                 jjtc003 = false;
                               }
/*@egen*/ {jjtn003.val = sp.image;}/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003, true);
                                 }
                               }
/*@egen*/	              /*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== MORE OPTIONS ==
*/
void MoreOptions() :
{/*@bgen(jjtree) MoreOptions */
        ASTMoreOptions jjtn000 = new ASTMoreOptions(JJTMOREOPTIONS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token comma;
}
{/*@bgen(jjtree) MoreOptions */
        try {
/*@egen*/
  	(
	  	comma = < COMMA >/*@bgen(jjtree) Comma */
                                  {
                                    ASTComma jjtn001 = new ASTComma(JJTCOMMA);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtc001 = false;
                                  }
/*@egen*/ {jjtn001.val = comma.image;}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                    }
                                  }
/*@egen*/	      
	  	NodeProperties()
	)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
 	== FILTER NODE PARAMETER PROPERTIES ==
*/
void NodeProperties() :
{/*@bgen(jjtree) NodeProperties */
        ASTNodeProperties jjtn000 = new ASTNodeProperties(JJTNODEPROPERTIES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token comma, osqbr, csqbr, key;
}
{/*@bgen(jjtree) NodeProperties */
        try {
/*@egen*/
  	osqbr = < OSQBR >/*@bgen(jjtree) OpenSquareBracket */
                          {
                            ASTOpenSquareBracket jjtn001 = new ASTOpenSquareBracket(JJTOPENSQUAREBRACKET);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtc001 = false;
                          }
/*@egen*/ {jjtn001.val = osqbr.image;}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
                          }
/*@egen*/		                  
  	key = < VARIABLE >/*@bgen(jjtree) Variable */
                           {
                             ASTVariable jjtn002 = new ASTVariable(JJTVARIABLE);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn002, true);
                             jjtc002 = false;
                           }
/*@egen*/ {jjtn002.val = key.image;}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002, true);
                             }
                           }
/*@egen*/		         
  	CompareValues()
  	(
    	comma = < COMMA >/*@bgen(jjtree) Comma */
                          {
                            ASTComma jjtn003 = new ASTComma(JJTCOMMA);
                            boolean jjtc003 = true;
                            jjtree.openNodeScope(jjtn003);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn003, true);
                            jjtc003 = false;
                          }
/*@egen*/ {jjtn003.val = comma.image;}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc003) {
                              jjtree.closeNodeScope(jjtn003, true);
                            }
                          }
/*@egen*/	      
    	key = < VARIABLE >/*@bgen(jjtree) Variable */
                           {
                             ASTVariable jjtn004 = new ASTVariable(JJTVARIABLE);
                             boolean jjtc004 = true;
                             jjtree.openNodeScope(jjtn004);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn004, true);
                             jjtc004 = false;
                           }
/*@egen*/ {jjtn004.val = key.image;}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc004) {
                               jjtree.closeNodeScope(jjtn004, true);
                             }
                           }
/*@egen*/	         
    	CompareValues()
  	)*
  	csqbr = < CSQBR >/*@bgen(jjtree) CloseSquareBracket */
                          {
                            ASTCloseSquareBracket jjtn005 = new ASTCloseSquareBracket(JJTCLOSESQUAREBRACKET);
                            boolean jjtc005 = true;
                            jjtree.openNodeScope(jjtn005);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn005, true);
                            jjtc005 = false;
                          }
/*@egen*/ {jjtn005.val = csqbr.image;}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc005) {
                              jjtree.closeNodeScope(jjtn005, true);
                            }
                          }
/*@egen*/		                   /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== DEFINE WAYS TO COMPARE VARIABLE WITH VALUES ==
*/
void CompareValues() :
{/*@bgen(jjtree) CompareValues */
        ASTCompareValues jjtn000 = new ASTCompareValues(JJTCOMPAREVALUES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token eq, os, s, i, f, cs, comma, comp;
}
{/*@bgen(jjtree) CompareValues */
        try {
/*@egen*/
  	// Equals to an Interval
  	eq = < EQ >/*@bgen(jjtree) Equal */
                    {
                      ASTEqual jjtn001 = new ASTEqual(JJTEQUAL);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                    }
/*@egen*/ {jjtn001.val = eq.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                      }
                    }
/*@egen*/			      
  	IntervalBracket()
  	DataToCompare()
  	comma = < COMMA >/*@bgen(jjtree) Comma */
                          {
                            ASTComma jjtn002 = new ASTComma(JJTCOMMA);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtc002 = false;
                          }
/*@egen*/ {jjtn002.val = comma.image;}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002, true);
                            }
                          }
/*@egen*/	      
  	Value()
  	IntervalBracket()
|
	// Compares to a Value
	comp = < COMP >/*@bgen(jjtree) Compares */
                        {
                          ASTCompares jjtn003 = new ASTCompares(JJTCOMPARES);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn003, true);
                          jjtc003 = false;
                        }
/*@egen*/ {jjtn003.val = comp.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                          }
                        }
/*@egen*/		         
	DataToCompare()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
	== INTERVAL BRACKET ==
*/
void IntervalBracket() :
{/*@bgen(jjtree) IntervalBracket */
        ASTIntervalBracket jjtn000 = new ASTIntervalBracket(JJTINTERVALBRACKET);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token os, cs;}{/*@bgen(jjtree) IntervalBracket */
        try {
/*@egen*/
  	os = < OSQBR >/*@bgen(jjtree) OpenSquareBracket */
                       {
                         ASTOpenSquareBracket jjtn001 = new ASTOpenSquareBracket(JJTOPENSQUAREBRACKET);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                       }
/*@egen*/ {jjtn001.val = os.image;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
                       }
/*@egen*/	                  
|
	cs = < CSQBR >/*@bgen(jjtree) CloseSquareBracket */
                       {
                         ASTCloseSquareBracket jjtn002 = new ASTCloseSquareBracket(JJTCLOSESQUAREBRACKET);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn002, true);
                         jjtc002 = false;
                       }
/*@egen*/ {jjtn002.val = cs.image;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                         }
                       }
/*@egen*/	                   /*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}

/*
	== DATA TYPE TO COMPARE ==
*/
void DataToCompare() :
{/*@bgen(jjtree) DataToCompare */
        ASTDataToCompare jjtn000 = new ASTDataToCompare(JJTDATATOCOMPARE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
  	Token s, i, f;}{/*@bgen(jjtree) DataToCompare */
        try {
/*@egen*/
  	s = < STRING >/*@bgen(jjtree) String */
                       {
                         ASTString jjtn001 = new ASTString(JJTSTRING);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                       }
/*@egen*/ {jjtn001.val = s.image;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
                       }
/*@egen*/		       
|
  	i = < INTEGER >/*@bgen(jjtree) Integer */
                        {
                          ASTInteger jjtn002 = new ASTInteger(JJTINTEGER);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                        }
/*@egen*/ {jjtn002.val = i.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
                        }
/*@egen*/	        
|
  	f = < FLOAT >/*@bgen(jjtree) Float */
                      {
                        ASTFloat jjtn003 = new ASTFloat(JJTFLOAT);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                      }
/*@egen*/ {jjtn003.val = f.image;}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003, true);
                        }
                      }
/*@egen*/		      /*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}
/* Generated By:JJTree: Do not edit this line. ASTSearchGraph.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package main;

import java.io.PrintWriter;

public class ASTSearchGraph extends SimpleNode {
	
	public Boolean semantic_error = false;

	public ASTSearchGraph(int id) {

		super(id);

	}

	public ASTSearchGraph(CronusGrammarParser p, int id) {

		super(p, id);

	}

	@Override
	public String interpret(String searchGraph) {
		
		// SearchGraph -> (NodeListDec | VARIABLE) EQ VARIABLE DOT SEARCH SearchType CPAR SCOL
		
		String nodes = jjtGetChild(5).interpret("");
		String[] nodes_split = nodes.split("-"); 
		
		if(nodes.equals("semantic_error")) {
			semantic_error = true;
			return "semantic_error";
		}
		
		else if(nodes.isEmpty())
			return "";
		
		
		return "";
		/*
		
		else {
			
			String g1 = symtab.get(nodes_split[0]).toString();
			String g2 = symtab.get(nodes_split[1]).toString();
			
			if((!g1.equals(g2)) | (!g1.equals(jjtGetChild(2).getVal().toString()))) {
				
				System.out.println(ErrorConstant.INC_PARA_TYPES);
				semantic_error = true;
				return "semantic_error";
				
			}
		
			// NodeListDec EQ VARIABLE DOT SEARCH SearchType CPAR SCOL
			if (jjtGetChild(0) instanceof ASTNodeListDec)
				jjtGetChild(0).interpret(jjtGetChild(2).getVal().toString());
			
			// VARIABLE EQ VARIABLE DOT SEARCH SearchType CPAR SCOL
			else {
		
				if (symtab.containsKey(jjtGetChild(0).getVal())) {
		
					if (!(symtab.containsKey(symtab.get(jjtGetChild(0).getVal())))) {
		
						System.out.println(ErrorConstant.SYMBOL_NOT_FOUND + symtab.get(jjtGetChild(0).getVal()).toString() + " is not of defined.");
						semantic_error = true;
						return "semantic_error";
		
					} else {
		
						symtab.put(jjtGetChild(0).getVal(), jjtGetChild(2).getVal().toString());
		
						if (!symtab.containsKey(nodes_split[0])) {
		
							System.out.println(ErrorConstant.FIRST_NODE_NF + jjtGetChild(2).getVal() + ".");
							semantic_error = true;
							return "semantic_error";
		
						} else {
		
							if (!symtab.containsKey(nodes_split[1])) {
		
								System.out.println(ErrorConstant.SECOND_NODE_NF + jjtGetChild(2).getVal() + ".");
								semantic_error = true;
								return "semantic_error";
		
							}
		
						}
		
					}
		
				} else {
		
					System.out.println(ErrorConstant.SYMBOL_NOT_FOUND + jjtGetChild(0).getVal() + ".");
					semantic_error = true;
					return "semantic_error";
		
				}
		
			}
		
			// Right Side
			if (symtab.containsKey(jjtGetChild(2).getVal())) {
		
				if (!(symtab.get(jjtGetChild(2).getVal()) instanceof Graph)) {
		
					System.out.println(ErrorConstant.INCOMPATIBLE_TYPES + jjtGetChild(2).getVal() + " is not of type Graph.");
					semantic_error = true;
					return "semantic_error";
		
				}
		
			} else {
		
				System.out.println(ErrorConstant.SYMBOL_NOT_FOUND + jjtGetChild(2).getVal() + ".");
				semantic_error = true;
				return "semantic_error";
		
			}
		
			// SearchType
			jjtGetChild(5).interpret("");
			
			return "";
			
		}
*/
	}

	@Override
	public void toGremlin(PrintWriter writer) {

		// Cronus: nos = shortestPath(n1, n5);
		// Gremlin: g.v(1).out.loop(1){it.object.id != "5"}.path.toList()
		
		// Cronus: nos = DepthSearch(n1);
		// Gremlin: g.v(1).outE('created').inV.inE('created').outV
		
		// Cronus: nos = BreadthSearch(n1);
		// Gremlin: g.v(1).outE('created').gather.scatter.inV.gather.scatter.inE('created').gather.scatter.outV.gather.scatter
		
		// g.v(1).out.loop(1){it.loops< 2 }.path{it.name}.groupBy{it.size()}{it}.cap.next()
		
		// SearchGraph -> (NodeListDec | VARIABLE) EQ VARIABLE DOT SEARCH SearchType CPAR SCOL
		
		if(!semantic_error) {
			
			String graph = jjtGetChild(2).getVal().toString();
			
			try {
				// VARIABLE EQ VARIABLE DOT SEARCH SearchType CPAR SCOL
				if (symtab.get(symtab.get(jjtGetChild(0).getVal())) instanceof Graph)
					writer.print(jjtGetChild(0).getVal().toString() + " = " + graph + ".v(");
				
				jjtGetChild(5).toGremlin(writer);
				
			}
			// NodeListDec EQ VARIABLE DOT SEARCH SearchType CPAR SCOL
			catch (NullPointerException e) {
				
				jjtGetChild(0).toGremlin(writer);
				writer.print(" = " + graph + ".V(");
				
				jjtGetChild(5).toGremlin(writer);
				
				
			}
			
			writer.println("");
		}
		
	}
}
/*
 * JavaCC - OriginalChecksum=846292d1a956497664ce7a1a19b15629 (do not edit this
 * line)
 */

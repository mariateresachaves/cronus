/* Generated By:JJTree: Do not edit this line. ASTNodeProperties.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package main;

import java.io.PrintWriter;

public class ASTNodeProperties extends SimpleNode {
	
	public Boolean semantic_error;

	public ASTNodeProperties(int id) {

		super(id);
		semantic_error = false;

	}

	public ASTNodeProperties(CronusGrammarParser p, int id) {

		super(p, id);
		semantic_error = false;

	}

	@Override
	public void interpret() {

		// TODO: alguma verificação que seja necessária
		// OBR VARIABLE EQ (Value | CompareValues) (COMMA VARIABLE EQ (Value | CompareValues))* CBR

	}
	
	@Override
	public void toGremlin(PrintWriter writer) {

		//NodeProperties -> (OBR VARIABLE EQ Value | OBR VARIABLE EQ CompareValues)
		//					(COMMA VARIABLE EQ Value | COMMA VARIABLE EQ CompareValues)* CBR
		
		if(!semantic_error) {
			
			int k = jjtGetNumChildren();
			int index = 1;
			
			if(k == 1)
				jjtGetChild(0).toGremlin(writer);
	
			while(index < k){
				
				writer.print("it." + jjtGetChild(index).getVal().toString());
				
				if(jjtGetChild(index + 2) instanceof ASTValue)
					writer.print(" == ");
			
				jjtGetChild(index + 2).setLabel(jjtGetChild(index).getVal().toString());
				jjtGetChild(index + 2).toGremlin(writer);
				
				index += 4;
				
				if(index < k)
					writer.print("; ");

			}
			
		}
		
	}

}
/*
 * JavaCC - OriginalChecksum=48a06f403664d66ecfdfc2759ad1ad73 (do not edit this
 * line)
 */
